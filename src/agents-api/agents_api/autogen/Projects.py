# generated by datamodel-codegen:
#   filename:  openapi-1.0.0.yaml

from __future__ import annotations

from typing import Annotated, Any
from uuid import UUID

from pydantic import AwareDatetime, BaseModel, ConfigDict, Field


class CreateProjectRequest(BaseModel):
    """
    Payload for creating a project
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    metadata: dict[str, Any] | None = None
    canonical_name: Annotated[
        str | None,
        Field(max_length=255, min_length=1, pattern="^[a-zA-Z][a-zA-Z0-9_]*$"),
    ] = None
    """
    Canonical name of the project (unique per developer)
    """
    name: Annotated[str, Field(max_length=255, min_length=1)]
    """
    Display name of the project
    """


class PatchProjectRequest(BaseModel):
    """
    Payload for patching a project
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    metadata: dict[str, Any] | None = None
    canonical_name: Annotated[
        str | None,
        Field(max_length=255, min_length=1, pattern="^[a-zA-Z][a-zA-Z0-9_]*$"),
    ] = None
    """
    Canonical name of the project (unique per developer)
    """
    name: Annotated[str | None, Field(max_length=255, min_length=1)] = None
    """
    Display name of the project
    """


class Project(BaseModel):
    """
    Project model
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: Annotated[UUID, Field(json_schema_extra={"readOnly": True})]
    metadata: dict[str, Any] | None = None
    created_at: Annotated[AwareDatetime, Field(json_schema_extra={"readOnly": True})]
    """
    When this resource was created as UTC date-time
    """
    updated_at: Annotated[AwareDatetime, Field(json_schema_extra={"readOnly": True})]
    """
    When this resource was updated as UTC date-time
    """
    canonical_name: Annotated[
        str | None,
        Field(max_length=255, min_length=1, pattern="^[a-zA-Z][a-zA-Z0-9_]*$"),
    ] = None
    """
    Canonical name of the project (unique per developer)
    """
    name: Annotated[str, Field(max_length=255, min_length=1)]
    """
    Display name of the project
    """


class UpdateProjectRequest(BaseModel):
    """
    Payload for updating a project
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    metadata: dict[str, Any] | None = None
    canonical_name: Annotated[
        str | None,
        Field(max_length=255, min_length=1, pattern="^[a-zA-Z][a-zA-Z0-9_]*$"),
    ] = None
    """
    Canonical name of the project (unique per developer)
    """
    name: Annotated[str, Field(max_length=255, min_length=1)]
    """
    Display name of the project
    """


class CreateOrUpdateProjectRequest(CreateProjectRequest):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: UUID
    metadata: dict[str, Any] | None = None
    canonical_name: Annotated[
        str | None,
        Field(max_length=255, min_length=1, pattern="^[a-zA-Z][a-zA-Z0-9_]*$"),
    ] = None
    """
    Canonical name of the project (unique per developer)
    """
    name: Annotated[str, Field(max_length=255, min_length=1)]
    """
    Display name of the project
    """
