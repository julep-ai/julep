# generated by datamodel-codegen:
#   filename:  openapi-1.0.0.yaml

from __future__ import annotations

from typing import Annotated, Any, Literal
from uuid import UUID

from pydantic import AwareDatetime, BaseModel, ConfigDict, Field, StrictBool

from .Common import Content


class BulkDeleteDocsRequest(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    metadata_filter: dict[str, Any] = {}
    """
    Metadata filter to apply to the search
    """
    delete_all: StrictBool = False
    """
    Delete all docs
    """


class CreateDocRequest(BaseModel):
    """
    Payload for creating a doc
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    metadata: dict[str, Any] | None = None
    title: Annotated[str, Field(max_length=800)]
    """
    Title describing what this document contains
    """
    content: Content | list[Content]
    """
    Contents of the document. Each string is limited to 30k characters.
    """
    embed_instruction: str | None = None
    """
    Instruction for the embedding model.
    """


class Doc(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: Annotated[UUID, Field(json_schema_extra={"readOnly": True})]
    metadata: dict[str, Any] | None = None
    created_at: Annotated[AwareDatetime, Field(json_schema_extra={"readOnly": True})]
    """
    When this resource was created as UTC date-time
    """
    title: Annotated[str, Field(max_length=800)]
    """
    Title describing what this document contains
    """
    content: str | list[str]
    """
    Contents of the document
    """
    embeddings: Annotated[
        list[float] | list[list[float]] | None,
        Field(json_schema_extra={"readOnly": True}),
    ] = None
    """
    Embeddings for the document
    """
    modality: Annotated[str | None, Field(json_schema_extra={"readOnly": True})] = None
    """
    Modality of the document
    """
    language: Annotated[str | None, Field(json_schema_extra={"readOnly": True})] = None
    """
    Language of the document
    """
    embedding_model: Annotated[str | None, Field(json_schema_extra={"readOnly": True})] = None
    """
    Embedding model used for the document
    """
    embedding_dimensions: Annotated[int | None, Field(json_schema_extra={"readOnly": True})] = (
        None
    )
    """
    Dimensions of the embedding model
    """


class DocOwner(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: UUID
    role: Literal["user", "agent"]


class DocReference(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    metadata: dict[str, Any] | None = None
    owner: DocOwner
    """
    The owner of this document.
    """
    id: Annotated[UUID, Field(json_schema_extra={"readOnly": True})]
    """
    ID of the document
    """
    title: str | None = None
    snippet: Snippet
    distance: float | None = None


class DocSearchResponse(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    docs: list[DocReference]
    """
    The documents that were found
    """
    time: Annotated[float, Field(gt=0.0)]
    """
    The time taken to search in seconds
    """


class EmbedQueryResponse(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    vectors: list[list[float]]
    """
    The embedded vectors
    """


class HybridDocSearchRequest(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    limit: Annotated[int, Field(ge=1, le=50)] = 10
    """
    The limit of documents to return
    """
    metadata_filter: dict[str, Any] = {}
    """
    Metadata filter to apply to the search
    """
    text: str
    """
    Text to use in the search
    """
    lang: str = "en-US"
    """
    The language to be used for text search. Support for other languages coming soon.
    """
    trigram_similarity_threshold: Annotated[float | None, Field(ge=0.0, le=1.0)] = None
    """
    Trigram similarity threshold for fuzzy matching. Set to null to disable trigram search.
    """
    vector: list[float]
    """
    Vector to use in the search. Must be the same dimensions as the embedding model or else an error will be thrown.
    """
    confidence: Annotated[float, Field(ge=-1.0, le=1.0)] = 0.5
    """
    The confidence cutoff level
    """
    mmr_strength: Annotated[float, Field(ge=0.0, lt=1.0)] = 0.5
    """
    MMR Strength (mmr_strength = 1 - mmr_lambda)
    """
    alpha: Annotated[float, Field(ge=0.0, le=1.0)] = 0.5
    """
    The weight to apply to BM25 vs Vector search results. 0 => pure BM25; 1 => pure vector;
    """
    k_multiplier: Annotated[int, Field(ge=1, le=10)] = 5
    """
    The k_multiplier to control how many intermediate results to fetch before final scoring
    """


class MultipleEmbedQueryRequest(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    text: Annotated[list[str], Field(max_length=100, min_length=1)]
    """
    Texts to embed
    """
    embed_instruction: str = ""
    """
    Instruction for the embedding model.
    """


class SingleEmbedQueryRequest(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    text: str
    """
    Text to embed
    """
    embed_instruction: str = ""
    """
    Instruction for the embedding model.
    """


class Snippet(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    index: int
    content: str
    embedding: list[float] | None = None


class TextOnlyDocSearchRequest(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    limit: Annotated[int, Field(ge=1, le=50)] = 10
    """
    The limit of documents to return
    """
    metadata_filter: dict[str, Any] = {}
    """
    Metadata filter to apply to the search
    """
    text: str
    """
    Text to use in the search
    """
    lang: str = "en-US"
    """
    The language to be used for text search. Support for other languages coming soon.
    """
    trigram_similarity_threshold: Annotated[float | None, Field(ge=0.0, le=1.0)] = None
    """
    Trigram similarity threshold for fuzzy matching. Set to null to disable trigram search.
    """


class VectorDocSearchRequest(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    limit: Annotated[int, Field(ge=1, le=50)] = 10
    """
    The limit of documents to return
    """
    metadata_filter: dict[str, Any] = {}
    """
    Metadata filter to apply to the search
    """
    vector: list[float]
    """
    Vector to use in the search. Must be the same dimensions as the embedding model or else an error will be thrown.
    """
    confidence: Annotated[float, Field(ge=-1.0, le=1.0)] = 0.5
    """
    The confidence cutoff level
    """
    mmr_strength: Annotated[float, Field(ge=0.0, lt=1.0)] = 0.5
    """
    MMR Strength (mmr_strength = 1 - mmr_lambda)
    """
