export declare const $lib: import("@typespec/compiler").TypeSpecLibrary<{
    "terminal-event-not-in-events": {
        readonly default: "A field marked as '@terminalEvent' must be a member of a type decorated with '@TpeSpec.Events.events'.";
    };
}, Record<string, any>, "terminalEvent">;
export declare const reportDiagnostic: <C extends "terminal-event-not-in-events", M extends keyof {
    "terminal-event-not-in-events": {
        readonly default: "A field marked as '@terminalEvent' must be a member of a type decorated with '@TpeSpec.Events.events'.";
    };
}[C]>(program: import("@typespec/compiler").Program, diag: import("@typespec/compiler").DiagnosticReport<{
    "terminal-event-not-in-events": {
        readonly default: "A field marked as '@terminalEvent' must be a member of a type decorated with '@TpeSpec.Events.events'.";
    };
}, C, M>) => void, createDiagnostic: <C extends "terminal-event-not-in-events", M extends keyof {
    "terminal-event-not-in-events": {
        readonly default: "A field marked as '@terminalEvent' must be a member of a type decorated with '@TpeSpec.Events.events'.";
    };
}[C]>(diag: import("@typespec/compiler").DiagnosticReport<{
    "terminal-event-not-in-events": {
        readonly default: "A field marked as '@terminalEvent' must be a member of a type decorated with '@TpeSpec.Events.events'.";
    };
}, C, M>) => import("@typespec/compiler").Diagnostic, SSEStateKeys: Record<"terminalEvent", symbol>;
//# sourceMappingURL=lib.d.ts.map