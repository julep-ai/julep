let currentProgram;
/** @experimental */
export function setCurrentProgram(program) {
    currentProgram = program;
}
/** @experimental */
export const TypekitPrototype = {};
/** @experimental */
export function createTypekit() {
    const tk = Object.create(TypekitPrototype);
    Object.defineProperty(tk, "program", {
        get() {
            return currentProgram;
        },
    });
    const handler = {
        get(target, prop, receiver) {
            const value = Reflect.get(target, prop, receiver);
            if (prop === "program") {
                // don't wrap program (probably need to ensure this isn't a nested program somewhere)
                return value;
            }
            if (typeof value === "function") {
                return function (...args) {
                    return value.apply(proxy, args);
                };
            }
            if (typeof value === "object" && value !== null) {
                return new Proxy(value, handler);
            }
            return value;
        },
    };
    const proxy = new Proxy(tk, handler);
    return proxy;
}
/** @experimental */
export function defineKit(source) {
    for (const [name, fnOrNs] of Object.entries(source)) {
        TypekitPrototype[name] = fnOrNs;
    }
}
/** @experimental */
export const $ = createTypekit();
//# sourceMappingURL=define-kit.js.map