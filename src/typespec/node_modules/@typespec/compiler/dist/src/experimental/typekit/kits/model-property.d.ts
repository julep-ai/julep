import type { ModelProperty, Type } from "../../../core/types.js";
import { EncodeData } from "../../../lib/decorators.js";
export interface ModelPropertyKit {
    /**
     * Check if the given `type` is a model property.
     *
     * @param type The type to check.
     */
    is(type: Type): type is ModelProperty;
    /**
     * Get the encoding of the model property or its type. The property's type
     * must be a scalar.
     *
     * @param property The model property to get the encoding for.
     */
    getEncoding(property: ModelProperty): EncodeData | undefined;
    /**
     * Get the format of the model property or its type. The property's type must
     * be a string.
     *
     * @param property The model property to get the format for.
     */
    getFormat(property: ModelProperty): string | undefined;
    /**
     * Get the visibility of the model property.
     */
    getVisibility(property: ModelProperty): string[] | undefined;
}
interface TypeKit {
    /**
     * Utilities for working with model properties.
     *
     * For many reflection operations, the metadata being asked for may be found
     * on the model property or the type of the model property. In such cases,
     * these operations will return the metadata from the model property if it
     * exists, or the type of the model property if it exists.
     */
    modelProperty: ModelPropertyKit;
}
declare module "../define-kit.js" {
    interface TypekitPrototype extends TypeKit {
    }
}
export {};
//# sourceMappingURL=model-property.d.ts.map