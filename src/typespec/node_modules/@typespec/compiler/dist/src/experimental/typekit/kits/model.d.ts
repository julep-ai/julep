import type { Model, ModelProperty, SourceModel, Type } from "../../../core/types.js";
import { DecoratorArgs } from "../utils.js";
interface ModelDescriptor {
    /**
     * The name of the Model. If name is provided, it is a Model  declaration.
     * Otherwise, it is a Model expression.
     */
    name?: string;
    /**
     * Decorators to apply to the Model.
     */
    decorators?: DecoratorArgs[];
    /**
     * Properties of the model.
     */
    properties: Record<string, ModelProperty>;
    /**
     * Models that extend this model.
     */
    derivedModels?: Model[];
    /**
     * Models that this model extends.
     */
    sourceModels?: SourceModel[];
}
export interface ModelKit {
    model: {
        /**
         * Create a model type.
         *
         * @param desc The descriptor of the model.
         */
        create(desc: ModelDescriptor): Model;
        /**
         * Check if the given `type` is a model..
         *
         * @param type The type to check.
         */
        is(type: Type): type is Model;
    };
}
declare module "../define-kit.js" {
    interface TypekitPrototype extends ModelKit {
    }
}
export declare const ModelKit: void;
export {};
//# sourceMappingURL=model.d.ts.map