import { Program } from "../core/program.js";
import { Decorator, Enum, EnumMember, FunctionParameter, FunctionType, Interface, IntrinsicType, Model, ModelProperty, Namespace, ObjectType, Operation, Projection, Scalar, ScalarConstructor, StringTemplate, StringTemplateSpan, TemplateParameter, Tuple, Type, Union, UnionVariant } from "../core/types.js";
import { Realm } from "./realm.js";
/** @experimental */
export type MutatorRecord<T extends Type> = {
    filter?: MutatorFilterFn<T>;
    mutate: MutatorFn<T>;
} | {
    filter?: MutatorFilterFn<T>;
    replace: MutatorReplaceFn<T>;
} | MutatorFn<T>;
/** @experimental */
export interface MutatorFn<T extends Type> {
    (sourceType: T, clone: T, program: Program, realm: Realm): void;
}
/** @experimental */
export interface MutatorFilterFn<T extends Type> {
    (sourceType: T, program: Program, realm: Realm): boolean | MutatorFlow;
}
/** @experimental */
export interface MutatorReplaceFn<T extends Type> {
    (sourceType: T, clone: T, program: Program, realm: Realm): Type;
}
/** @experimental */
export interface Mutator {
    name: string;
    Model?: MutatorRecord<Model>;
    ModelProperty?: MutatorRecord<ModelProperty>;
    Scalar?: MutatorRecord<Scalar>;
    Enum?: MutatorRecord<Enum>;
    EnumMember?: MutatorRecord<EnumMember>;
    Union?: MutatorRecord<Union>;
    UnionVariant?: MutatorRecord<UnionVariant>;
    Tuple?: MutatorRecord<Tuple>;
    Operation?: MutatorRecord<Operation>;
    Interface?: MutatorRecord<Interface>;
    String?: MutatorRecord<Scalar>;
    Number?: MutatorRecord<Scalar>;
    Boolean?: MutatorRecord<Scalar>;
    ScalarConstructor?: MutatorRecord<ScalarConstructor>;
    StringTemplate?: MutatorRecord<StringTemplate>;
    StringTemplateSpan?: MutatorRecord<StringTemplateSpan>;
}
/** @experimental */
export declare enum MutatorFlow {
    MutateAndRecurse = 0,
    DoNotMutate = 1,
    DoNotRecurse = 2
}
/** @experimental */
export type MutableType = Exclude<Type, TemplateParameter | Namespace | IntrinsicType | FunctionType | Decorator | FunctionParameter | ObjectType | Projection>;
/** @experimental */
export declare function mutateSubgraph<T extends MutableType>(program: Program, mutators: Mutator[], type: T): {
    realm: Realm | null;
    type: MutableType;
};
//# sourceMappingURL=mutators.d.ts.map