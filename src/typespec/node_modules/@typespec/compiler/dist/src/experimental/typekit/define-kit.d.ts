import { type Program } from "../../core/program.js";
/** @experimental */
export declare function setCurrentProgram(program: Program): void;
/** @experimental */
export interface TypekitPrototype {
    program: Program;
}
/** @experimental */
export declare const TypekitPrototype: Record<string, unknown>;
/** @experimental */
export declare function createTypekit(): TypekitPrototype;
/** @experimental */
export interface TypekitContext {
    program: Program;
}
/**
 * contextual typing to type guards is annoying (often have to restate the signature),
 * so this helper will remove the type assertions from the interface you are currently defining.
 * @experimental
 */
export type StripGuards<T> = {
    [K in keyof T]: T[K] extends (...args: infer P) => infer R ? (...args: P) => R : StripGuards<T[K]>;
};
/** @experimental */
export declare function defineKit<T extends Record<string, any>>(source: StripGuards<T> & ThisType<TypekitPrototype>): void;
/** @experimental */
export declare const $: TypekitPrototype;
//# sourceMappingURL=define-kit.d.ts.map