import type { Type, Union, UnionVariant } from "../../../core/types.js";
import { DecoratorArgs } from "../utils.js";
interface UnionVariantDescriptor {
    /**
     * The name of the union variant.
     */
    name?: string | symbol;
    /**
     * Decorators to apply to the union variant.
     */
    decorators?: DecoratorArgs[];
    /**
     * The type of the union variant.
     */
    type: Type;
    /**
     * The union that the variant belongs to. If not provided here, it is assumed
     * that it will be set in `union.build`.
     */
    union?: Union;
}
export interface UnionVariantKit {
    unionVariant: {
        /**
         * Create a union variant.
         *
         * @param desc The descriptor of the union variant.
         */
        create(desc: UnionVariantDescriptor): UnionVariant;
        /**
         * Check if the given `type` is a union.
         *
         * @param type The type to check.
         */
        is(type: Type): type is UnionVariant;
    };
}
declare module "../define-kit.js" {
    interface TypekitPrototype extends UnionVariantKit {
    }
}
export {};
//# sourceMappingURL=union-variant.d.ts.map