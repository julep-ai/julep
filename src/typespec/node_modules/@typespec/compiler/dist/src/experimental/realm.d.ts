import { Program } from "../core/program.js";
import { Type } from "../core/types.js";
declare class StateMapRealmView<V> implements Map<Type, V> {
    #private;
    constructor(realm: Realm, realmState: Map<Type, V>, parentState: Map<Type, V>);
    has(t: Type): boolean;
    set(t: Type, v: any): this;
    get(t: Type): V | undefined;
    delete(t: Type): boolean;
    forEach(cb: (value: V, key: Type, map: Map<Type, V>) => void, thisArg?: any): this;
    get size(): number;
    clear(): void;
    entries(): IterableIterator<[Type, V]>;
    values(): IterableIterator<V>;
    keys(): IterableIterator<Type>;
    [Symbol.iterator](): IterableIterator<[Type, V]>;
    [Symbol.toStringTag]: string;
    dispatch(keyType: Type): Map<Type, V>;
}
/** @experimental */
export declare class Realm {
    #private;
    key: symbol;
    constructor(program: Program, description: string);
    stateMap(stateKey: symbol): StateMapRealmView<any>;
    clone<T extends Type>(type: T): T;
    remove(type: Type): void;
    hasType(type: Type): boolean;
    addType(type: Type): void;
    static realmForKey(key: symbol, parentRealm?: Realm): Realm | undefined;
    static realmForType: Map<Type, Realm>;
}
export {};
//# sourceMappingURL=realm.d.ts.map