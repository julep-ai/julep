import { ResolveModuleError } from "../module-resolver/module-resolver.js";
import { PackageJson } from "../types/package-json.js";
import { DiagnosticTarget, NoTarget, ParseOptions, SourceFile, Tracer, type CompilerHost, type Diagnostic, type JsSourceFileNode, type LocationContext, type TypeSpecScriptNode } from "./types.js";
export interface SourceResolution {
    /** TypeSpec source files */
    readonly sourceFiles: Map<string, TypeSpecScriptNode>;
    /** Javascript source files(Entrypoint only) */
    readonly jsSourceFiles: Map<string, JsSourceFileNode>;
    readonly locationContexts: WeakMap<SourceFile, LocationContext>;
    readonly loadedLibraries: Map<string, TypeSpecLibraryReference>;
    readonly diagnostics: readonly Diagnostic[];
}
interface TypeSpecLibraryReference {
    path: string;
    manifest: PackageJson;
}
export interface LoadSourceOptions {
    readonly parseOptions?: ParseOptions;
    readonly tracer?: Tracer;
    getCachedScript?: (file: SourceFile) => TypeSpecScriptNode | undefined;
}
export interface SourceLoader {
    importFile(path: string, locationContext?: LocationContext, kind?: "import" | "entrypoint"): Promise<void>;
    importPath(path: string, target: DiagnosticTarget | typeof NoTarget, relativeTo: string, locationContext?: LocationContext): Promise<void>;
    readonly resolution: SourceResolution;
}
/**
 * Create a TypeSpec source loader. This will be able to resolve and load TypeSpec and JS files.
 * @param host Compiler host
 * @param options Loading options
 */
export declare function createSourceLoader(host: CompilerHost, options?: LoadSourceOptions): Promise<SourceLoader>;
export declare function loadJsFile(host: CompilerHost, path: string, diagnosticTarget: DiagnosticTarget | typeof NoTarget): Promise<[JsSourceFileNode | undefined, readonly Diagnostic[]]>;
export declare function moduleResolutionErrorToDiagnostic(e: ResolveModuleError, specifier: string, target: DiagnosticTarget | typeof NoTarget): Diagnostic;
export {};
//# sourceMappingURL=source-loader.d.ts.map