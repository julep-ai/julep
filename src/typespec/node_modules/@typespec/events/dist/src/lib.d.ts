export declare const $lib: import("@typespec/compiler").TypeSpecLibrary<{
    "invalid-content-type-target": {
        readonly default: "@contentType can only be specified on the top-level event envelope, or the event payload marked with @data";
    };
    "multiple-event-payloads": {
        readonly default: import("@typespec/compiler").CallableMessage<["dataPath", "currentPath"]>;
        readonly payloadInIndexedModel: import("@typespec/compiler").CallableMessage<["dataPath"]>;
    };
}, Record<string, any>, "data" | "events" | "contentType">;
export declare const reportDiagnostic: <C extends "invalid-content-type-target" | "multiple-event-payloads", M extends keyof {
    "invalid-content-type-target": {
        readonly default: "@contentType can only be specified on the top-level event envelope, or the event payload marked with @data";
    };
    "multiple-event-payloads": {
        readonly default: import("@typespec/compiler").CallableMessage<["dataPath", "currentPath"]>;
        readonly payloadInIndexedModel: import("@typespec/compiler").CallableMessage<["dataPath"]>;
    };
}[C]>(program: import("@typespec/compiler").Program, diag: import("@typespec/compiler").DiagnosticReport<{
    "invalid-content-type-target": {
        readonly default: "@contentType can only be specified on the top-level event envelope, or the event payload marked with @data";
    };
    "multiple-event-payloads": {
        readonly default: import("@typespec/compiler").CallableMessage<["dataPath", "currentPath"]>;
        readonly payloadInIndexedModel: import("@typespec/compiler").CallableMessage<["dataPath"]>;
    };
}, C, M>) => void, createDiagnostic: <C extends "invalid-content-type-target" | "multiple-event-payloads", M extends keyof {
    "invalid-content-type-target": {
        readonly default: "@contentType can only be specified on the top-level event envelope, or the event payload marked with @data";
    };
    "multiple-event-payloads": {
        readonly default: import("@typespec/compiler").CallableMessage<["dataPath", "currentPath"]>;
        readonly payloadInIndexedModel: import("@typespec/compiler").CallableMessage<["dataPath"]>;
    };
}[C]>(diag: import("@typespec/compiler").DiagnosticReport<{
    "invalid-content-type-target": {
        readonly default: "@contentType can only be specified on the top-level event envelope, or the event payload marked with @data";
    };
    "multiple-event-payloads": {
        readonly default: import("@typespec/compiler").CallableMessage<["dataPath", "currentPath"]>;
        readonly payloadInIndexedModel: import("@typespec/compiler").CallableMessage<["dataPath"]>;
    };
}, C, M>) => import("@typespec/compiler").Diagnostic, EventsStateKeys: Record<"data" | "events" | "contentType", symbol>;
//# sourceMappingURL=lib.d.ts.map