import { type DiagnosticResult, type Program, type Type, type Union, type UnionVariant } from "@typespec/compiler";
export declare function getEventDefinitions(program: Program, target: Union): DiagnosticResult<EventDefinition[]>;
/**
 * Represents the definition of an event.
 */
export interface EventDefinition {
    /**
     * The name of the event type.
     * This may be used when the underlying event protocol supports event types
     * out-of-band from the event evelope or event payload.
     */
    readonly eventType?: string;
    /**
     * The root variant of the union that represents the event.
     */
    readonly root: UnionVariant;
    /**
     * Indicates whether the `type` describes an event envelope
     * with a separate event payload.
     */
    readonly isEventEnvelope: boolean;
    /**
     * The type of the event.
     * This represents an event envelope if `isEventEnvelope` is `true`.
     */
    readonly type: Type;
    /**
     * The content type of the event.
     * This represents the content type of the event envelope if `isEventEnvelope` is `true`.
     */
    readonly contentType?: string;
    /**
     * The type of the event payload.
     * This matches `type` if `isEventEnvelope` is `false`.
     */
    readonly payloadType: Type;
    /**
     * The content type of the event payload.
     * This matches `contentType` if `isEventEnvelope` is `false`.
     */
    readonly payloadContentType?: string;
}
//# sourceMappingURL=get-event-definitions.d.ts.map