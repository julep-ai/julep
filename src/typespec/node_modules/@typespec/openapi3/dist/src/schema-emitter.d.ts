import { BooleanLiteral, Enum, EnumMember, IntrinsicType, Model, ModelProperty, NumericLiteral, Program, Scalar, StringLiteral, StringTemplate, Tuple, Type, Union, UnionVariant, Value } from "@typespec/compiler";
import { AssetEmitter, Context, Declaration, EmitEntity, EmitterOutput, ReferenceCycle, Scope, TypeEmitter } from "@typespec/compiler/emitter-framework";
import { MetadataInfo } from "@typespec/http";
import { OpenAPI3EmitterOptions } from "./lib.js";
import { ResolvedOpenAPI3EmitterOptions } from "./openapi.js";
import { OpenAPI3Schema, OpenAPI3SchemaProperty } from "./types.js";
import { VisibilityUsageTracker } from "./visibility-usage.js";
/**
 * OpenAPI3 schema emitter. Deals with emitting content of `components/schemas` section.
 */
export declare class OpenAPI3SchemaEmitter extends TypeEmitter<Record<string, any>, OpenAPI3EmitterOptions> {
    #private;
    constructor(emitter: AssetEmitter<Record<string, any>, OpenAPI3EmitterOptions>, metadataInfo: MetadataInfo, visibilityUsage: VisibilityUsageTracker, options: ResolvedOpenAPI3EmitterOptions);
    modelDeclarationReferenceContext(model: Model, name: string): Context;
    modelLiteralReferenceContext(model: Model): Context;
    scalarDeclarationReferenceContext(scalar: Scalar, name: string): Context;
    enumDeclarationReferenceContext(en: Enum, name: string): Context;
    unionDeclarationReferenceContext(union: Union): Context;
    reduceContext(type: Type): Context;
    modelDeclaration(model: Model, _: string): EmitterOutput<object>;
    modelLiteral(model: Model): EmitterOutput<object>;
    modelInstantiation(model: Model, name: string | undefined): EmitterOutput<Record<string, any>>;
    arrayDeclaration(array: Model, name: string, elementType: Type): EmitterOutput<object>;
    arrayDeclarationReferenceContext(array: Model, name: string, elementType: Type): Context;
    arrayLiteral(array: Model, elementType: Type): EmitterOutput<object>;
    arrayLiteralReferenceContext(array: Model, elementType: Type): Context;
    modelProperties(model: Model): EmitterOutput<Record<string, OpenAPI3SchemaProperty>>;
    modelPropertyLiteral(prop: ModelProperty): EmitterOutput<object>;
    booleanLiteral(boolean: BooleanLiteral): EmitterOutput<object>;
    stringLiteral(string: StringLiteral): EmitterOutput<object>;
    stringTemplate(string: StringTemplate): EmitterOutput<object>;
    numericLiteral(number: NumericLiteral): EmitterOutput<object>;
    enumDeclaration(en: Enum, name: string): EmitterOutput<object>;
    enumMember(member: EnumMember): EmitterOutput<Record<string, any>>;
    enumMemberReference(member: EnumMember): EmitterOutput<Record<string, any>>;
    unionDeclaration(union: Union, name: string): EmitterOutput<object>;
    unionLiteral(union: Union): EmitterOutput<object>;
    unionVariants(union: Union): EmitterOutput<object>;
    unionVariant(variant: UnionVariant): EmitterOutput<object>;
    modelPropertyReference(prop: ModelProperty): EmitterOutput<object>;
    reference(targetDeclaration: Declaration<Record<string, unknown>>, pathUp: Scope<Record<string, unknown>>[], pathDown: Scope<Record<string, unknown>>[], commonScope: Scope<Record<string, unknown>> | null): object | EmitEntity<Record<string, unknown>>;
    circularReference(target: EmitEntity<Record<string, any>>, scope: Scope<Record<string, any>> | undefined, cycle: ReferenceCycle): Record<string, any> | EmitEntity<Record<string, any>>;
    scalarDeclaration(scalar: Scalar, name: string): EmitterOutput<OpenAPI3Schema>;
    scalarInstantiation(scalar: Scalar, name: string | undefined): EmitterOutput<Record<string, any>>;
    tupleLiteral(tuple: Tuple): EmitterOutput<Record<string, any>>;
    intrinsic(intrinsic: IntrinsicType, name: string): EmitterOutput<object>;
    programContext(program: Program): Context;
}
export declare function getDefaultValue(program: Program, defaultType: Value, modelProperty: ModelProperty): any;
export declare function isBytesKeptRaw(program: Program, type: Type): boolean;
//# sourceMappingURL=schema-emitter.d.ts.map