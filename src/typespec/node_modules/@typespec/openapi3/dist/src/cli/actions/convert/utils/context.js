import { SchemaToExpressionGenerator } from "../generators/generate-types.js";
import { generateNamespaceName } from "./generate-namespace-name.js";
export function createContext(openApi3Doc) {
    const rootNamespace = generateNamespaceName(openApi3Doc.info.title);
    const schemaExpressionGenerator = new SchemaToExpressionGenerator(rootNamespace);
    const context = {
        openApi3Doc,
        rootNamespace,
        getRefName(ref, callingScope) {
            return schemaExpressionGenerator.getRefName(ref, callingScope);
        },
        generateTypeFromRefableSchema(schema, callingScope) {
            return schemaExpressionGenerator.generateTypeFromRefableSchema(schema, callingScope);
        },
        getSchemaByRef(ref) {
            const schemaName = ref.replace("#/components/schemas/", "");
            const schema = openApi3Doc.components?.schemas?.[schemaName];
            return schema;
        },
    };
    return context;
}
//# sourceMappingURL=context.js.map