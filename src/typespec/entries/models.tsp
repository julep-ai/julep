import "../common";
import "../sessions";
import "../tools";

using Common;
using Sessions;
using Tools;

namespace Entries;

//
// ENTRY MODELS
//

/** Image detail level */
enum ImageDetail {
    low,
    high,
    auto,
}

/** ChatML role (system|assistant|user|tool) */
enum ChatMLRole {
    user,
    assistant,
    system,
    tool,
}

model ImageURL<T extends string = string> {
    /** Image URL or base64 data url (e.g. `data:image/jpeg;base64,<the base64 encoded image>`) */
    url: T;

    /** The detail level of the image */
    detail: ImageDetail = ImageDetail.auto;
}

model ChatMLTextContentPart<T extends string = string> {
    text: T;

    /** The type (fixed to 'text') */
    type: "text" = "text";
}

model ChatMLImageContentPart<T extends string = string> {
    /** The image URL */
    image_url: ImageURL;

    /** The type (fixed to 'image_url') */
    type: "image_url" = "image_url";
}

model ChatMLAnthropicImageSource<T extends string = string> {
    type: "base64" = "base64";
    media_type: string;
    data: T;
}

model ChatMLAnthropicImageContentPart<T extends string = string> {
    type: "image" = "image";
    source: ChatMLAnthropicImageSource<T>;
}

/** Anthropic image content part */
model ChatMLAnthropicContentPart<T extends string = string> {
    tool_use_id: string;
    type: "tool_result" = "tool_result";
    content: ChatMLTextContentPart<T>[] | ChatMLAnthropicImageContentPart<T>[];
}

alias ChatMLContentPart<T extends string = string> = ChatMLTextContentPart<T> | ChatMLImageContentPart<T> | ChatMLAnthropicContentPart<T>;

model ChatMLMessage<T extends string = string> {
    /** The role of the message */
    role: ChatMLRole;
    tool_call_id?: string;

    /** The content parts of the message */
    content: T | T[] | ChatMLContentPart<T>[] | null;

    /** Name */
    name?: string;

    /** Whether to continue this message or return a new one */
    @visibility("create")
    continue?: boolean;

    /** Tool calls generated by the model. */
    tool_calls?: ChosenToolCall[] | null = #[];

    ...HasCreatedAtOptional;
    ...HasIdOptional;
}

@withVisibility("create")
model InputChatMLMessage<T extends string = string> {
    ...ChatMLMessage<T>;
}

alias EntryContent = ChatMLContentPart<string>[] | Tool | ChosenToolCall | string | ToolResponse;

model BaseEntry {
    role: ChatMLRole;
    name: string | null = null;
    content: EntryContent | EntryContent[];
    source: entrySource;

    tokenizer: string;
    token_count: uint16;
    "model": string = "gpt-4o-mini";

    /** Tool calls generated by the model. */
    tool_calls?: ChosenToolCall[] | null = null;

    /** The tool call id of the tool call this message is a response to */
    tool_call_id?: string | null = null;

    /** This is the time that this event refers to. */
    timestamp: utcDateTime;
}

model Entry extends BaseEntry {
    /** This is the time it was added to the database */
    ...HasCreatedAt;
    ...HasId;
}

model Relation {
    head: uuid;
    relation: string;
    tail: uuid;
}

model History {
    entries: Entry[];
    relations: Relation[];
    session_id: Session.id;

    ...HasCreatedAt;
}