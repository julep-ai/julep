# generated by datamodel-codegen:
#   filename:  openapi-1.0.0.yaml

from __future__ import annotations

from typing import Annotated, Any, Literal

from pydantic import BaseModel, ConfigDict, Field, RootModel, StrictBool


class BaseTool(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    type: str


class Click(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    type: Literal["click"] = "click"
    """
    Specifies the event type. For a click action, this property is always set to `click`.
    """
    button: Literal["left", "right", "wheel", "back", "forward"]
    """
    Indicates which mouse button was pressed during the click. One of `left`, `right`, `wheel`, `back`, or `forward`.
    """
    x: int
    """
    The x-coordinate where the click occurred.
    """
    y: int
    """
    The y-coordinate where the click occurred.
    """


class ComputerScreenshotImage(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    type: Literal["computer_screenshot"] = "computer_screenshot"
    """
    Specifies the event type. For a computer screenshot, this property is always set to `computer_screenshot`.
    """
    image_url: str | None = None
    """
    The URL of the screenshot image.
    """
    file_id: str | None = None
    """
    The identifier of an uploaded file that contains the screenshot.
    """


class ComputerTool(BaseTool):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    type: Literal["computer_use_preview"] = "computer_use_preview"
    """
    The type of the computer use tool. Always `computer_use_preview`.
    """
    display_width: float
    """
    The width of the computer display.
    """
    display_height: float
    """
    The height of the computer display.
    """
    environment: Literal["mac", "windows", "ubuntu", "browser"]
    """
    The type of computer environment to control.
    """


class ComputerToolCall(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    type: Literal["computer_call"] = "computer_call"
    """
    The type of the computer call. Always `computer_call`.
    """
    id: str
    """
    The unique ID of the computer call.
    """
    call_id: str
    """
    An identifier used when responding to the tool call with output.
    """
    action: Click | DoubleClick | Drag | KeyPress | Move | Screenshot | Scroll | Type | Wait
    """
    The action to perform.
    """
    pending_safety_checks: list[ComputerToolCallSafetyCheck]
    """
    The pending safety checks for the computer call.
    """
    status: Literal["in_progress", "completed", "incomplete"]
    """
    The status of the item. One of `in_progress`, `completed`, or `incomplete`. Populated when items are returned via API.
    """


class ComputerToolCallOutput(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    type: Literal["computer_call_output"] = "computer_call_output"
    """
    The type of the computer tool call output. Always `computer_call_output`.
    """
    id: str | None = None
    """
    The ID of the computer tool call output.
    """
    call_id: str
    """
    The ID of the computer tool call that produced the output.
    """
    acknowledged_safety_checks: list[ComputerToolCallSafetyCheck] | None = None
    """
    The safety checks reported by the API that have been acknowledged by the developer.
    """
    output: ComputerScreenshotImage
    """
    The output screenshot image.
    """
    status: Literal["in_progress", "completed", "incomplete"] | None = None
    """
    The status of the message input. One of `in_progress`, `completed`, or `incomplete`. Populated when input items are returned via API.
    """


class ComputerToolCallOutputResource(ComputerToolCallOutput):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: str
    """
    The unique ID of the computer call tool output.
    """


class ComputerToolCallSafetyCheck(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: str
    """
    The ID of the pending safety check.
    """
    code: str
    """
    The type of the pending safety check.
    """
    message: str
    """
    Details about the pending safety check.
    """


class Coordinate(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    x: int
    """
    The x-coordinate.
    """
    y: int
    """
    The y-coordinate.
    """


class CreateResponse(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    model: str
    input: (
        str
        | list[
            EasyInputMessage
            | Item
            | InputMessageResource
            | OutputMessage
            | FileSearchToolCall
            | ComputerToolCall
            | ComputerToolCallOutputResource
            | WebSearchToolCall
            | FunctionToolCall
            | FunctionToolCallOutputResource
        ]
    )
    include: (
        list[
            Literal[
                "file_search_call.results",
                "message.input_image.image_url",
                "computer_call_output.output.image_url",
            ]
        ]
        | None
    ) = None
    parallel_tool_calls: StrictBool = True
    store: StrictBool = True
    stream: StrictBool = False
    max_tokens: int | None = None
    temperature: float = 1
    top_p: float = 1
    n: int | None = None
    stop: str | list[str] | None = None
    presence_penalty: float | None = None
    frequency_penalty: float | None = None
    logit_bias: dict[str, Any] | None = None
    user: str | None = None
    instructions: str | None = None
    previous_response_id: str | None = None
    reasoning: Reasoning | None = None
    text: Text | None = None
    tool_choice: Literal["auto", "none"] | ToolChoice | None = None
    tools: list[FunctionTool | WebSearchTool | FileSearchTool | ComputerTool] | None = None
    truncation: Literal["disabled", "auto"] | None = None
    metadata: dict[str, Any] | None = None


class DoubleClick(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    type: Literal["double_click"] = "double_click"
    """
    Specifies the event type. For a double click action, this property is always set to `double_click`.
    """
    x: int
    """
    The x-coordinate where the double click occurred.
    """
    y: int
    """
    The y-coordinate where the double click occurred.
    """


class Drag(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    type: Literal["drag"] = "drag"
    """
    Specifies the event type. For a drag action, this property is always set to `drag`.
    """
    path: list[Coordinate]
    """
    An array of coordinates representing the path of the drag action.
    """


class EasyInputMessage(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    role: Literal["user", "assistant", "system", "developer"]
    """
    The role of the message input. One of `user`, `assistant`, `system`, or `developer`.
    """
    content: str | list[InputText | InputImage | InputFile]
    """
    Text, image, or audio input to the model, used to generate a response. Can also contain previous assistant responses.
    """
    type: Literal["message"] = "message"
    """
    The type of the message input. Always `message`.
    """


class FileCitation(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    type: Literal["file_citation"] = "file_citation"
    """
    The type of the file citation. Always `file_citation`.
    """
    index: int
    """
    The index of the file in the list of files.
    """
    file_id: str
    """
    The ID of the file.
    """


class FilePath(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    type: Literal["file_path"] = "file_path"
    """
    The type of the file path. Always `file_path`.
    """
    file_id: str
    """
    The ID of the file.
    """
    index: int
    """
    The index of the file in the list of files.
    """


class FileSearchTool(BaseTool):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    type: Literal["file_search"] = "file_search"
    filters: Any | None = None
    max_num_results: int | None = None
    ranking_options: RankingOptions | None = None
    vector_store_ids: list[str]


class FileSearchToolCall(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: str
    """
    The unique ID of the file search tool call.
    """
    type: Literal["file_search_call"] = "file_search_call"
    """
    The type of the file search tool call. Always `file_search_call`.
    """
    status: Literal["in_progress", "searching", "completed", "incomplete", "failed"]
    """
    The status of the file search tool call. One of `in_progress`, `searching`, `incomplete` or `failed`
    """
    queries: list[str]
    """
    The queries used to search for files.
    """
    results: list[Result] | None = None
    """
    The results of the file search tool call.
    """


class Function(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    name: str


class FunctionTool(BaseTool):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    type: Literal["function"] = "function"
    name: str
    description: str | None = None
    parameters: dict[str, Any]
    strict: StrictBool | None = None


class FunctionToolCall(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: str
    """
    The unique ID of the function tool call.
    """
    type: Literal["function_call"] = "function_call"
    """
    The type of the function tool call. Always `function_call`.
    """
    call_id: str
    """
    The unique ID of the function tool call generated by the model.
    """
    name: str
    """
    The name of the function to run.
    """
    arguments: str
    """
    A JSON string of the arguments to pass to the function.
    """
    status: Literal["in_progress", "completed", "incomplete"] | None = None
    """
    The status of the item. One of `in_progress`, `completed`, or `incomplete`. Populated when items are returned via API.
    """


class FunctionToolCallOutput(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: str | None = None
    """
    The unique ID of the function tool call output. Populated when this item is returned via API.
    """
    type: Literal["function_call_output"] = "function_call_output"
    """
    The type of the function tool call output. Always `function_call_output`.
    """
    call_id: str
    """
    The unique ID of the function tool call generated by the model.
    """
    output: str
    """
    A JSON string of the output of the function tool call.
    """
    status: Literal["in_progress", "completed", "incomplete"] | None = None
    """
    The status of the item. One of `in_progress`, `completed`, or `incomplete`. Populated when items are returned via API.
    """


class FunctionToolCallOutputResource(FunctionToolCallOutput):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: str | None = None
    """
    The unique ID of the function call tool output.
    """


class IncompleteDetails(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    reason: Literal["max_output_tokens", "content_filter"]


class InputFile(BaseModel):
    """
    A file input to the model.
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    type: Literal["input_file"] = "input_file"
    """
    The type of the input item. Always `input_file`.
    """
    file_id: str | None = None
    """
    The ID of the file to be sent to the model.
    """
    filename: str | None = None
    """
    The name of the file to be sent to the model.
    """
    file_data: str | None = None
    """
    The content of the file to be sent to the model.
    """


class InputImage(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    type: Literal["input_image"] = "input_image"
    """
    The type of the input item. Always `input_image`.
    """
    image_url: str | None = None
    """
    The URL of the image to be sent to the model. A fully qualified URL or base64 encoded image in a data URL.
    """
    file_id: str | None = None
    """
    The ID of the file to be sent to the model.
    """
    detail: Literal["high", "low", "auto"] = "auto"
    """
    The detail level of the image to be sent to the model. One of `high`, `low`, or `auto`. Defaults to `auto`.
    """


class InputMessage(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    type: Literal["message"] = "message"
    role: Literal["user", "assistant", "system", "developer"]
    status: Literal["in_progress", "completed", "incomplete"]
    content: list[InputText | InputImage | InputFile]


class InputMessageResource(InputMessage):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: str


class InputText(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    type: Literal["input_text"] = "input_text"
    """
    The type of the input item. Always `input_text`.
    """
    text: str
    """
    The text input to the model.
    """


class InputTokensDetails(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cached_tokens: int


class Item(BaseModel):
    """
    An item representing part of the context for the response to be generated by the model. Can contain text, images, and audio inputs, as well as previous assistant responses and tool call outputs.
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    type: str


class KeyPress(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    type: Literal["keypress"] = "keypress"
    """
    Specifies the event type. For a keypress action, this property is always set to `keypress`.
    """
    keys: list[str]
    """
    The combination of keys the model is requesting to be pressed. This is an array of strings, each representing a key.
    """


class Move(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    type: Literal["move"] = "move"
    """
    Specifies the event type. For a move action, this property is always set to `move`.
    """
    x: int
    """
    The x-coordinate to move to.
    """
    y: int
    """
    The y-coordinate to move to.
    """


class OutputMessage(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: str
    type: Literal["message"] = "message"
    role: Literal["user", "assistant", "system", "developer"]
    status: Literal["in_progress", "completed", "incomplete"]
    content: list[OutputText | Refusal]


class OutputText(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    type: Literal["output_text"] = "output_text"
    """
    The type of the output text. Always `output_text`.
    """
    text: str
    """
    The text output from the model.
    """
    annotations: list[FileCitation | UrlCitation | FilePath]
    """
    The annotations of the text output.
    """


class OutputTokensDetails(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    reasoning_tokens: int


class RankingOptions(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    ranker: Literal["auto"] | None = None
    score_threshold: float | None = None


class Reasoning(BaseModel):
    """
    Reasoning configuration options for o-series models.
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    effort: Literal["low", "medium", "high"]
    """
    Constraint effort on reasoning models.
    """
    generate_summary: Literal["concise", "detailed"] | None = None
    """
    A summary of the reasoning performed by the model. This can be useful for debugging and understanding the model's reasoning process. One of `concise` or `detailed`.
    """


class ReasoningContent(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    type: Literal["reasoning_summary"] = "reasoning_summary"
    """
    The type of the object. Always `text`.
    """
    text: str
    """
    A short summary of the reasoning used by the model when generating the response.
    """


class ReasoningItem(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    type: Literal["reasoning"] = "reasoning"
    """
    The type of the object. Always `reasoning`.
    """
    id: str
    """
    The unique identifier of the reasoning content.
    """
    content: list[ReasoningContent]
    """
    Reasoning text contents.
    """
    status: Literal["in_progress", "completed", "incomplete"] | None = None
    """
    The status of the item. One of `in_progress`, `completed`, or `incomplete`. Populated when items are returned via API.
    """


class Refusal(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    type: Literal["refusal"] = "refusal"
    """
    The type of the refusal. Always `refusal`.
    """
    refusal: str
    """
    The refusal explanation from the model.
    """


class Response(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: str
    object: Literal["response"] = "response"
    created_at: int
    status: Literal["completed", "failed", "in_progress", "incomplete"]
    error: ResponseError | None = None
    incomplete_details: IncompleteDetails | None = None
    instructions: str | None = None
    max_output_tokens: int | None = None
    model: str
    output: list[
        OutputMessage
        | FileSearchToolCall
        | FunctionToolCall
        | WebSearchToolCall
        | ComputerToolCall
        | ReasoningItem
    ]
    parallel_tool_calls: StrictBool = True
    previous_response_id: str | None = None
    reasoning: Reasoning | None = None
    store: StrictBool = True
    temperature: float = 1
    text: Text | None = None
    tool_choice: ToolChoiceTypes | ToolChoiceFunction | Literal["auto", "none", "required"]
    tools: list[FunctionTool | WebSearchTool | FileSearchTool | ComputerTool]
    top_p: float = 1
    truncation: Literal["disabled", "auto"]
    usage: ResponseUsage
    user: str | None = None
    metadata: dict[str, Any]


class ResponseError(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    message: str
    type: str
    param: str | None = None
    code: str | None = None


class ResponseFormatJsonObject(BaseModel):
    """
    JSON object response format. An older method of generating JSON responses.

    Using `json_schema` is recommended for models that support it. Note that the
    model will not generate JSON without a system or user message instructing it
    to do so.
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    type: Literal["json_object"] = "json_object"
    """
    The type of response format being defined. Always `json_object`.
    """


class ResponseFormatText(BaseModel):
    """
    Default response format. Used to generate text responses.
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    type: Literal["text"] = "text"
    """
    The type of response format being defined. Always `text`.
    """


class ResponseUsage(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    input_tokens: int
    input_tokens_details: InputTokensDetails
    output_tokens: int
    output_tokens_details: OutputTokensDetails
    total_tokens: int


class Result(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    file_id: str
    """
    The unique ID of the file.
    """
    text: str
    """
    The text that was retrieved from the file.
    """
    filename: str
    """
    The name of the file.
    """
    attributes: VectorStoreFileAttributes
    """
    The attributes of the file.
    """
    score: float
    """
    The relevance score of the file - a value between 0 and 1.
    """


class Screenshot(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    type: Literal["screenshot"] = "screenshot"
    """
    Specifies the event type. For a screenshot action, this property is always set to `screenshot`.
    """


class Scroll(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    type: Literal["scroll"] = "scroll"
    """
    Specifies the event type. For a scroll action, this property is always set to `scroll`.
    """
    x: int
    """
    The x-coordinate where the scroll occurred.
    """
    y: int
    """
    The y-coordinate where the scroll occurred.
    """
    scroll_x: int
    """
    The horizontal scroll distance.
    """
    scroll_y: int
    """
    The vertical scroll distance.
    """


class Text(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    format: ResponseFormatText | TextResponseFormatJsonSchema | ResponseFormatJsonObject


class TextResponseFormatJsonSchema(BaseModel):
    """
    JSON Schema response format. Used to generate structured JSON responses. Learn more about [Structured Outputs](/docs/guides/structured-outputs).
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    type: Literal["json_schema"] = "json_schema"
    """
    The type of response format being defined. Always `json_schema`.
    """
    description: str | None = None
    """
    A description of what the response format is for, used by the model to determine how to respond in the format.
    """
    name: str | None = None
    """
    The name of the response format. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.
    """
    schema_: Annotated[dict[str, Any], Field(alias="schema")]
    """
    The JSON schema that defines the structure of the response.
    """
    strict: StrictBool = False
    """
    Whether to enable strict schema adherence when generating the output. If set to true, the model will always follow the exact schema defined in the `schema` field. Only a subset of JSON Schema is supported when `strict` is `true`. To learn more, read the [Structured Outputs guide](/docs/guides/structured-outputs).
    """


class ToolChoice(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    type: Literal["function"] = "function"
    function: Function


class ToolChoiceFunction(BaseModel):
    """
    Use this option to force the model to call a specific function.
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    type: Literal["function"] = "function"
    """
    For function calling, the type is always `function`.
    """
    name: str
    """
    The name of the function to call.
    """


class ToolChoiceTypes(BaseModel):
    """
    Indicates that the model should use a built-in tool to generate a response.

    [Learn more about built-in tools](/docs/guides/tools).
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    type: Literal[
        "file_search",
        "web_search_preview",
        "computer_use_preview",
        "web_search_preview_2025_03_11",
    ]
    """
    The type of hosted tool the model should to use. Learn more about
    [built-in tools](/docs/guides/tools).

    Allowed values are:
    - `file_search`
    - `web_search_preview`
    - `computer_use_preview`
    """


class Type(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    type: Literal["type"] = "type"
    """
    Specifies the event type. For a type action, this property is always set to `type`.
    """
    text: str
    """
    The text to type.
    """


class UrlCitation(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    url: str
    """
    The URL of the web resource.
    """
    title: str
    """
    The title of the web resource.
    """
    type: Literal["url_citation"] = "url_citation"
    """
    The type of the URL citation. Always `url_citation`.
    """
    start_index: int
    """
    The index of the first character of the URL citation in the message.
    """
    end_index: int
    """
    The index of the last character of the URL citation in the message.
    """


class UserLocation(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    type: Literal["approximate"] = "approximate"
    city: str | None = None
    country: str | None = None
    region: str | None = None
    timezone: str | None = None


class VectorStoreFileAttributes(BaseModel):
    """
    Set of key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format, and querying for objects via API or the dashboard. Keys are strings with a maximum length of 64 characters. Values are strings with a maximum length of 512 characters, booleans, or numbers.
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    properties: dict[str, VectorStoreFileAttributesString | StrictBool | float]
    """
    Key-value pairs where keys are strings with max length 64 and values are strings with max length 512, booleans, or numbers.
    """


class VectorStoreFileAttributesString(RootModel[str]):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    root: Annotated[str, Field(max_length=512)]


class Wait(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    type: Literal["wait"] = "wait"
    """
    Specifies the event type. For a wait action, this property is always set to `wait`.
    """


class WebSearchTool(BaseTool):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    type: Literal["web_search_preview"] = "web_search_preview"
    domains: list[str] | None = None
    search_context_size: Literal["small", "medium", "large"] | None = None
    user_location: UserLocation | None = None


class WebSearchToolCall(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: str
    """
    The unique ID of the web search tool call.
    """
    type: Literal["web_search_call"] = "web_search_call"
    """
    The type of the web search tool call. Always `web_search_call`.
    """
    status: Literal["in_progress", "searching", "completed", "failed"]
    """
    The status of the web search tool call.
    """
