# generated by datamodel-codegen:
#   filename:  openapi-1.0.0.yaml

from __future__ import annotations

from typing import Annotated, Any
from uuid import UUID

from pydantic import AwareDatetime, BaseModel, ConfigDict, Field


class CreateSecretRequest(BaseModel):
    """
    Payload for creating a secret
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    name: str
    """
    The name of the secret (unique within developer and agent scope)
    """
    value: str
    """
    The encrypted value of the secret (never returned back in API responses)
    """
    description: str | None = None
    """
    Optional description of what the secret is used for
    """
    metadata: dict[str, Any] | None = None
    """
    Optional metadata for the secret
    """
    agent_id: UUID | None = None
    """
    The agent that can access this secret (if null, all developer's agents can access)
    """


class PatchSecretRequest(BaseModel):
    """
    Payload for patching a secret
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    name: str | None = None
    """
    The name of the secret (unique within developer and agent scope)
    """
    value: str | None = None
    """
    The encrypted value of the secret (never returned back in API responses)
    """
    description: str | None = None
    """
    Optional description of what the secret is used for
    """
    metadata: dict[str, Any] | None = None
    """
    Optional metadata for the secret
    """
    agent_id: UUID | None = None
    """
    The agent that can access this secret (if null, all developer's agents can access)
    """


class ResourceDeletedResponse(BaseModel):
    """
    Response for a resource deletion
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: str
    """
    The ID of the deleted resource
    """


class Secret(BaseModel):
    """
    Secret model for encrypting and storing sensitive values
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: Annotated[UUID, Field(json_schema_extra={"readOnly": True})]
    """
    The secret's unique identifier
    """
    name: str
    """
    The name of the secret (unique within developer and agent scope)
    """
    description: str | None = None
    """
    Optional description of what the secret is used for
    """
    metadata: dict[str, Any] | None = None
    """
    Optional metadata for the secret
    """
    developer_id: Annotated[UUID | None, Field(json_schema_extra={"readOnly": True})] = None
    """
    The developer that owns this secret
    """
    created_at: Annotated[AwareDatetime, Field(json_schema_extra={"readOnly": True})]
    """
    When this resource was created as UTC date-time
    """
    updated_at: Annotated[AwareDatetime, Field(json_schema_extra={"readOnly": True})]
    """
    When this resource was updated as UTC date-time
    """


class SecretsSummary(BaseModel):
    """
    Response for listing secrets
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: UUID
    """
    The secret's unique identifier
    """
    name: str
    """
    The name of the secret
    """
    description: str | None = None
    """
    Optional description of what the secret is used for
    """
    created_at: AwareDatetime
    """
    When the secret was created
    """
    updated_at: AwareDatetime
    """
    When the secret was last updated
    """
    agent_id: UUID | None = None
    """
    The agent that can access this secret (if null, all developer's agents can access)
    """


class UpdateSecretRequest(BaseModel):
    """
    Payload for updating a secret
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    name: str
    """
    The name of the secret (unique within developer and agent scope)
    """
    value: str
    """
    The encrypted value of the secret (never returned back in API responses)
    """
    description: str | None = None
    """
    Optional description of what the secret is used for
    """
    metadata: dict[str, Any] | None = None
    """
    Optional metadata for the secret
    """
    agent_id: UUID | None = None
    """
    The agent that can access this secret (if null, all developer's agents can access)
    """
