# generated by datamodel-codegen:
#   filename:  openapi-1.0.0.yaml

from __future__ import annotations

from typing import Annotated, Any
from uuid import UUID

from pydantic import AwareDatetime, BaseModel, ConfigDict, Field


class CreateUserRequest(BaseModel):
    """
    Payload for creating a user (and associated documents)
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    metadata: dict[str, Any] | None = None
    name: Annotated[
        str,
        Field(
            max_length=120,
            pattern="^[\\p{L}\\p{Nl}\\p{Pattern_Syntax}\\p{Pattern_White_Space}]+[\\p{ID_Start}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\p{Pattern_Syntax}\\p{Pattern_White_Space}]*$",
        ),
    ] = ""
    """
    Name of the user
    """
    about: str = ""
    """
    About the user
    """
    project: Annotated[
        str | None,
        Field(max_length=255, min_length=1, pattern="^[a-zA-Z][a-zA-Z0-9_]*$"),
    ] = None
    """
    Project canonical name of the user
    """


class PatchUserRequest(BaseModel):
    """
    Payload for patching a user
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    metadata: dict[str, Any] | None = None
    name: Annotated[
        str,
        Field(
            max_length=120,
            pattern="^[\\p{L}\\p{Nl}\\p{Pattern_Syntax}\\p{Pattern_White_Space}]+[\\p{ID_Start}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\p{Pattern_Syntax}\\p{Pattern_White_Space}]*$",
        ),
    ] = ""
    """
    Name of the user
    """
    about: str = ""
    """
    About the user
    """
    project: Annotated[
        str | None,
        Field(max_length=255, min_length=1, pattern="^[a-zA-Z][a-zA-Z0-9_]*$"),
    ] = None
    """
    Project canonical name of the user
    """


class UpdateUserRequest(BaseModel):
    """
    Payload for updating a user
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    metadata: dict[str, Any] | None = None
    name: Annotated[
        str,
        Field(
            max_length=120,
            pattern="^[\\p{L}\\p{Nl}\\p{Pattern_Syntax}\\p{Pattern_White_Space}]+[\\p{ID_Start}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\p{Pattern_Syntax}\\p{Pattern_White_Space}]*$",
        ),
    ] = ""
    """
    Name of the user
    """
    about: str = ""
    """
    About the user
    """
    project: Annotated[
        str | None,
        Field(max_length=255, min_length=1, pattern="^[a-zA-Z][a-zA-Z0-9_]*$"),
    ] = None
    """
    Project canonical name of the user
    """


class User(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: Annotated[UUID, Field(json_schema_extra={"readOnly": True})]
    metadata: dict[str, Any] | None = None
    created_at: Annotated[AwareDatetime, Field(json_schema_extra={"readOnly": True})]
    """
    When this resource was created as UTC date-time
    """
    updated_at: Annotated[AwareDatetime, Field(json_schema_extra={"readOnly": True})]
    """
    When this resource was updated as UTC date-time
    """
    name: Annotated[
        str,
        Field(
            max_length=120,
            pattern="^[\\p{L}\\p{Nl}\\p{Pattern_Syntax}\\p{Pattern_White_Space}]+[\\p{ID_Start}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\p{Pattern_Syntax}\\p{Pattern_White_Space}]*$",
        ),
    ] = ""
    """
    Name of the user
    """
    about: str = ""
    """
    About the user
    """
    project: Annotated[
        str | None,
        Field(max_length=255, min_length=1, pattern="^[a-zA-Z][a-zA-Z0-9_]*$"),
    ] = None
    """
    Project canonical name of the user
    """


class CreateOrUpdateUserRequest(CreateUserRequest):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: UUID
