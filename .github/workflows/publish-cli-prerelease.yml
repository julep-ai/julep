name: Publish CLI Prerelease to PyPI

# AIDEV-NOTE: Auto-publish CLI package to PyPI for prerelease versions only
on:
  push:
    branches:
      - dev
      - main
    paths:
      - 'cli/**'
  workflow_dispatch:

jobs:
  check-and-publish:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./cli
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true
          
      - name: Install dependencies
        run: |
          uv sync --dev
          
      - name: Extract version from pyproject.toml
        id: version
        run: |
          # Extract version using grep and sed (no additional dependencies needed)
          VERSION=$(grep '^version = ' pyproject.toml | sed 's/version = "\(.*\)"/\1/')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Extracted version: $VERSION"
          
      - name: Check if version is prerelease
        id: prerelease
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          echo "Checking version: $VERSION"
          
          # Check if version contains prerelease indicators
          if echo "$VERSION" | grep -E "(alpha|beta|rc|pre|dev)" > /dev/null; then
            echo "is_prerelease=true" >> $GITHUB_OUTPUT
            echo "✅ Version $VERSION is a prerelease"
          else
            echo "is_prerelease=false" >> $GITHUB_OUTPUT
            echo "❌ Version $VERSION is NOT a prerelease"
          fi
          
      - name: Run linting and type checking
        if: steps.prerelease.outputs.is_prerelease == 'true'
        run: |
          uv run poe lint
          uv run poe typecheck
          
      - name: Run tests
        if: steps.prerelease.outputs.is_prerelease == 'true'
        run: |
          uv run poe test
          
      - name: Build package
        if: steps.prerelease.outputs.is_prerelease == 'true'
        run: |
          uv build
          
      - name: Check if version already exists on PyPI
        if: steps.prerelease.outputs.is_prerelease == 'true'
        id: check_pypi
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          
          # Check if this version already exists on PyPI
          if pip index versions julep-cli | grep "$VERSION" > /dev/null 2>&1; then
            echo "version_exists=true" >> $GITHUB_OUTPUT
            echo "⚠️ Version $VERSION already exists on PyPI"
          else
            echo "version_exists=false" >> $GITHUB_OUTPUT
            echo "✅ Version $VERSION does not exist on PyPI, proceeding with publish"
          fi
          
      - name: Publish to PyPI
        if: steps.prerelease.outputs.is_prerelease == 'true' && steps.check_pypi.outputs.version_exists == 'false'
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          packages-dir: cli/dist/
          verbose: true
          
      - name: Create GitHub Release
        if: steps.prerelease.outputs.is_prerelease == 'true' && steps.check_pypi.outputs.version_exists == 'false'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: cli-v${{ steps.version.outputs.version }}
          release_name: CLI v${{ steps.version.outputs.version }}
          body: |
            🚀 **Julep CLI Prerelease v${{ steps.version.outputs.version }}**
            
            This is a prerelease version of the Julep CLI.
            
            ## Installation
            ```bash
            pip install julep-cli==${{ steps.version.outputs.version }}
            ```
            
            ## Changes
            See the [changelog](https://github.com/julep-ai/julep/blob/dev/CHANGELOG.md) for detailed changes.
            
            ---
            *This release was automatically generated by GitHub Actions.*
          prerelease: true
          draft: false
          
      - name: Summary
        run: |
          echo "## Workflow Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Is Prerelease**: ${{ steps.prerelease.outputs.is_prerelease }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Version Exists on PyPI**: ${{ steps.check_pypi.outputs.version_exists }}" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ steps.prerelease.outputs.is_prerelease }}" == "true" ] && [ "${{ steps.check_pypi.outputs.version_exists }}" == "false" ]; then
            echo "- **Action**: ✅ Published to PyPI and created GitHub release" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ steps.prerelease.outputs.is_prerelease }}" == "true" ] && [ "${{ steps.check_pypi.outputs.version_exists }}" == "true" ]; then
            echo "- **Action**: ⚠️ Skipped (version already exists on PyPI)" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Action**: ❌ Skipped (not a prerelease version)" >> $GITHUB_STEP_SUMMARY
          fi