# generated by datamodel-codegen:
#   filename:  openapi-1.0.0.yaml

from __future__ import annotations

from typing import Annotated, Any
from uuid import UUID

from pydantic import AwareDatetime, BaseModel, ConfigDict, Field, StrictBool


class CreateDeveloperRequest(BaseModel):
    """
    Payload for creating a developer
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    email: str
    """
    The developer's email address
    """
    active: StrictBool
    """
    Whether the developer account is active
    """
    tags: list[str]
    """
    Tags associated with the developer
    """
    settings: dict[str, Any]
    """
    Developer settings
    """


class Developer(BaseModel):
    """
    Developer model representing a platform developer account
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: Annotated[UUID, Field(json_schema_extra={"readOnly": True})]
    """
    The developer's unique identifier
    """
    email: str
    """
    The developer's email address
    """
    active: StrictBool
    """
    Whether the developer account is active
    """
    tags: list[str]
    """
    Tags associated with the developer
    """
    settings: dict[str, Any]
    """
    Developer settings
    """
    created_at: Annotated[AwareDatetime, Field(json_schema_extra={"readOnly": True})]
    """
    When this resource was created as UTC date-time
    """
    updated_at: Annotated[AwareDatetime, Field(json_schema_extra={"readOnly": True})]
    """
    When this resource was updated as UTC date-time
    """


class PatchDeveloperRequest(BaseModel):
    """
    Payload for patching a developer
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    email: str | None = None
    """
    The developer's email address
    """
    active: StrictBool | None = None
    """
    Whether the developer account is active
    """
    tags: list[str] | None = None
    """
    Tags associated with the developer
    """
    settings: dict[str, Any] | None = None
    """
    Developer settings
    """


class UpdateDeveloperRequest(BaseModel):
    """
    Payload for updating a developer
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    email: str
    """
    The developer's email address
    """
    active: StrictBool
    """
    Whether the developer account is active
    """
    tags: list[str]
    """
    Tags associated with the developer
    """
    settings: dict[str, Any]
    """
    Developer settings
    """
