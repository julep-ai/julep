# generated by datamodel-codegen:
#   filename:  openapi-1.0.0.yaml

from __future__ import annotations

from typing import Annotated, Any, Literal
from uuid import UUID

from pydantic import (
    AnyUrl,
    AwareDatetime,
    BaseModel,
    ConfigDict,
    Field,
    StrictBool,
)


class ApiCallDef(BaseModel):
    """
    API call definition
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    method: Literal[
        "GET", "POST", "PUT", "DELETE", "PATCH", "HEAD", "OPTIONS", "CONNECT", "TRACE"
    ]
    """
    The HTTP method to use
    """
    url: AnyUrl
    """
    The URL to call
    """
    schema_: Annotated[dict[str, Any] | None, Field(alias="schema")] = None
    """
    The schema of the response
    """
    headers: dict[str, str] | None = None
    """
    The headers to send with the request
    """
    content: str | None = None
    """
    The content as base64 to send with the request
    """
    data: dict[str, Any] | None = None
    """
    The data to send as form data
    """
    files: dict[str, Any] | None = None
    """
    The data to send as files data
    """
    json_: Annotated[dict[str, Any] | None, Field(alias="json")] = None
    """
    JSON body to send with the request
    """
    cookies: dict[str, str] | None = None
    """
    Cookies
    """
    params: str | dict[str, Any] | None = None
    """
    The parameters to send with the request
    """
    follow_redirects: StrictBool | None = None
    """
    Follow redirects
    """
    timeout: int | None = None
    """
    The timeout for the request
    """


class ApiCallDefUpdate(BaseModel):
    """
    API call definition
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    method: (
        Literal[
            "GET",
            "POST",
            "PUT",
            "DELETE",
            "PATCH",
            "HEAD",
            "OPTIONS",
            "CONNECT",
            "TRACE",
        ]
        | None
    ) = None
    """
    The HTTP method to use
    """
    url: AnyUrl | None = None
    """
    The URL to call
    """
    schema_: Annotated[dict[str, Any] | None, Field(alias="schema")] = None
    """
    The schema of the response
    """
    headers: dict[str, str] | None = None
    """
    The headers to send with the request
    """
    content: str | None = None
    """
    The content as base64 to send with the request
    """
    data: dict[str, Any] | None = None
    """
    The data to send as form data
    """
    files: dict[str, Any] | None = None
    """
    The data to send as files data
    """
    json_: Annotated[dict[str, Any] | None, Field(alias="json")] = None
    """
    JSON body to send with the request
    """
    cookies: dict[str, str] | None = None
    """
    Cookies
    """
    params: str | dict[str, Any] | None = None
    """
    The parameters to send with the request
    """
    follow_redirects: StrictBool | None = None
    """
    Follow redirects
    """
    timeout: int | None = None
    """
    The timeout for the request
    """


class ArxivSearchArguments(BaseModel):
    """
    Arguments for Arxiv Search
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    query: str
    """
    The search query for searching with Arxiv
    """
    id_list: list[str] | None = None
    """
    The list of Arxiv IDs to search with
    """
    max_results: Annotated[int, Field(ge=1, le=300000)] = 5
    """
    The maximum number of results to return
    """
    download_pdf: StrictBool = False
    """
    The download the pdf of the results
    """
    sort_by: Literal["relevance", "lastUpdatedDate", "submittedDate"] = "relevance"
    """
    The sort criterion for the results
    """
    sort_order: Literal["ascending", "descending"] = "descending"
    """
    The sort order for the results
    """


class ArxivSearchArgumentsUpdate(BaseModel):
    """
    Arguments for Arxiv Search
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    query: str | None = None
    """
    The search query for searching with Arxiv
    """
    id_list: list[str] | None = None
    """
    The list of Arxiv IDs to search with
    """
    max_results: Annotated[int, Field(ge=1, le=300000)] = 5
    """
    The maximum number of results to return
    """
    download_pdf: StrictBool = False
    """
    The download the pdf of the results
    """
    sort_by: Literal["relevance", "lastUpdatedDate", "submittedDate"] = "relevance"
    """
    The sort criterion for the results
    """
    sort_order: Literal["ascending", "descending"] = "descending"
    """
    The sort order for the results
    """


class BaseChosenToolCall(BaseModel):
    """
    The response tool value generated by the model
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    type: Literal[
        "function",
        "integration",
        "system",
        "api_call",
        "computer_20241022",
        "text_editor_20241022",
        "bash_20241022",
    ]
    """
    Whether this tool is a `function`, `api_call`, `system` etc. (Only `function` tool supported right now)
    """
    function: FunctionCallOption | None = None
    integration: Any | None = None
    system: Any | None = None
    api_call: Any | None = None
    computer_20241022: ChosenComputer20241022 | None = None
    """
    (Alpha) Anthropic new tools
    """
    text_editor_20241022: ChosenTextEditor20241022 | None = None
    bash_20241022: ChosenBash20241022 | None = None
    id: Annotated[str | None, Field(json_schema_extra={"readOnly": True})] = None


class BaseIntegrationDef(BaseModel):
    """
    Integration definition
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    provider: Literal[
        "dummy",
        "weather",
        "wikipedia",
        "spider",
        "brave",
        "browserbase",
        "email",
        "remote_browser",
        "llama_parse",
        "ffmpeg",
        "cloudinary",
        "arxiv",
    ]
    """
    The provider of the integration
    """
    method: str | None = None
    """
    The specific method of the integration to call
    """
    setup: Any | None = None
    """
    The setup parameters the integration accepts
    """
    arguments: Any | None = None
    """
    The arguments to pre-apply to the integration call
    """


class BaseIntegrationDefUpdate(BaseModel):
    """
    Integration definition
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    provider: (
        Literal[
            "dummy",
            "weather",
            "wikipedia",
            "spider",
            "brave",
            "browserbase",
            "email",
            "remote_browser",
            "llama_parse",
            "ffmpeg",
            "cloudinary",
            "arxiv",
        ]
        | None
    ) = None
    """
    The provider of the integration
    """
    method: str | None = None
    """
    The specific method of the integration to call
    """
    setup: Any | None = None
    """
    The setup parameters the integration accepts
    """
    arguments: Any | None = None
    """
    The arguments to pre-apply to the integration call
    """


class Bash20241022Def(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    type: Literal["bash_20241022"] = "bash_20241022"
    name: str = "bash"


class Bash20241022DefUpdate(Bash20241022Def):
    pass


class BraveIntegrationDef(BaseIntegrationDef):
    """
    Brave integration definition
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    provider: Literal["brave"] = "brave"
    """
    The provider must be "brave"
    """
    method: str | None = None
    """
    The specific method of the integration to call
    """
    setup: BraveSearchSetup | None = None
    """
    The setup parameters for Brave
    """
    arguments: BraveSearchArguments | None = None
    """
    The arguments for Brave Search
    """


class BraveIntegrationDefUpdate(BaseIntegrationDefUpdate):
    """
    Brave integration definition
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    provider: Literal["brave"] = "brave"
    """
    The provider must be "brave"
    """
    method: str | None = None
    """
    The specific method of the integration to call
    """
    setup: BraveSearchSetupUpdate | None = None
    """
    The setup parameters for Brave
    """
    arguments: BraveSearchArgumentsUpdate | None = None
    """
    The arguments for Brave Search
    """


class BraveSearchArguments(BaseModel):
    """
    Arguments for Brave Search
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    query: str
    """
    The search query for searching with Brave
    """


class BraveSearchArgumentsUpdate(BaseModel):
    """
    Arguments for Brave Search
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    query: str | None = None
    """
    The search query for searching with Brave
    """


class BraveSearchSetup(BaseModel):
    """
    Integration definition for Brave Search
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    api_key: str
    """
    The api key for Brave Search
    """


class BraveSearchSetupUpdate(BaseModel):
    """
    Integration definition for Brave Search
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    api_key: str | None = None
    """
    The api key for Brave Search
    """


class BrowserbaseCompleteSessionArguments(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: str
    status: Literal["REQUEST_RELEASE"] = "REQUEST_RELEASE"


class BrowserbaseCompleteSessionArgumentsUpdate(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: str | None = None
    status: Literal["REQUEST_RELEASE"] = "REQUEST_RELEASE"


class BrowserbaseContextArguments(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    project_id: Annotated[str, Field(alias="projectId")]
    """
    The Project ID. Can be found in Settings.
    """


class BrowserbaseContextArgumentsUpdate(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    project_id: Annotated[str | None, Field(alias="projectId")] = None
    """
    The Project ID. Can be found in Settings.
    """


class BrowserbaseCreateSessionArguments(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    project_id: Annotated[str | None, Field(alias="projectId")] = None
    """
    The Project ID. Can be found in Settings.
    """
    extension_id: Annotated[str | None, Field(alias="extensionId")] = None
    """
    The installed Extension ID. See Install Extension from GitHub.
    """
    browser_settings: Annotated[dict[str, Any], Field(alias="browserSettings")] = {}
    """
    Browser settings
    """
    timeout: int = 3600
    """
    Duration in seconds after which the session will automatically end. Defaults to the Project's defaultTimeout.
    """
    keep_alive: Annotated[StrictBool, Field(alias="keepAlive")] = False
    """
    Set to true to keep the session alive even after disconnections. This is available on the Startup plan only.
    """
    proxies: StrictBool | list[dict[str, Any]] = False
    """
    Proxy configuration. Can be true for default proxy, or an array of proxy configurations.
    """


class BrowserbaseExtensionArguments(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    repository_name: Annotated[str, Field(alias="repositoryName")]
    """
    The GitHub repository name.
    """
    ref: str | None = None
    """
    Ref to install from a branch or tag.
    """


class BrowserbaseExtensionArgumentsUpdate(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    repository_name: Annotated[str | None, Field(alias="repositoryName")] = None
    """
    The GitHub repository name.
    """
    ref: str | None = None
    """
    Ref to install from a branch or tag.
    """


class BrowserbaseGetSessionArguments(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: str


class BrowserbaseGetSessionArgumentsUpdate(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: str | None = None


class BrowserbaseGetSessionLiveUrlsArguments(BrowserbaseGetSessionArguments):
    pass


class BrowserbaseGetSessionLiveUrlsArgumentsUpdate(BrowserbaseGetSessionArgumentsUpdate):
    pass


class BrowserbaseListSessionsArguments(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    status: Literal["RUNNING", "ERROR", "TIMED_OUT", "COMPLETED"] | None = None
    """
    The status of the sessions to list (Available options: RUNNING, ERROR, TIMED_OUT, COMPLETED)
    """


class BrowserbaseSetup(BaseModel):
    """
    The setup parameters for the browserbase integration
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    api_key: str
    """
    API key for the browserbase integration
    """
    project_id: str
    """
    The project ID. Can be found in Settings.
    """
    api_url: str | None = None
    """
    The API URL. Defaults to https://www.browserbase.com
    """
    connect_url: str | None = None
    """
    The connect URL. Defaults to wss://connect.browserbase.com
    """


class BrowserbaseSetupUpdate(BaseModel):
    """
    The setup parameters for the browserbase integration
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    api_key: str | None = None
    """
    API key for the browserbase integration
    """
    project_id: str | None = None
    """
    The project ID. Can be found in Settings.
    """
    api_url: str | None = None
    """
    The API URL. Defaults to https://www.browserbase.com
    """
    connect_url: str | None = None
    """
    The connect URL. Defaults to wss://connect.browserbase.com
    """


class ChosenBash20241022(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    command: str | None = None
    """
    The bash command to run
    """
    restart: StrictBool = False
    """
    Whether to restart the tool
    """


class ChosenComputer20241022(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    action: Literal[
        "key",
        "type",
        "cursor_position",
        "mouse_move",
        "left_click",
        "right_click",
        "middle_click",
        "double_click",
        "screenshot",
    ]
    """
    The action to perform
    """
    text: str | None = None
    """
    The text to type
    """
    coordinate: list[int] | None = None
    """
    The (x, y) pixel coordinate to move the cursor to
    """


class ChosenFunctionCall(BaseChosenToolCall):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    type: Literal["function"] = "function"
    function: FunctionCallOption
    """
    The function to call
    """


class ChosenTextEditor20241022(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    command: Literal["str_replace", "insert", "view", "undo_edit"]
    """
    The command to run
    """
    path: str
    """
    The path to the file
    """
    file_text: str | None = None
    """
    The content of the file to be created
    """
    insert_line: int | None = None
    """
    The line to insert the new string after
    """
    new_str: str | None = None
    """
    The new string to insert
    """
    old_str: str | None = None
    """
    The string in the file to replace
    """
    view_range: list[int] | None = None
    """
    The line range to view
    """


class CloudinaryEditArguments(BaseModel):
    """
    Arguments for Cloudinary media edit
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    public_id: str
    """
    The file Public ID in Cloudinary
    """
    transformation: list[dict[str, Any]]
    """
    The transformation to apply to the file
    """
    return_base64: StrictBool = False
    """
    Return base64 encoded file
    """


class CloudinaryEditArgumentsUpdate(BaseModel):
    """
    Arguments for Cloudinary media edit
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    public_id: str | None = None
    """
    The file Public ID in Cloudinary
    """
    transformation: list[dict[str, Any]] | None = None
    """
    The transformation to apply to the file
    """
    return_base64: StrictBool = False
    """
    Return base64 encoded file
    """


class CloudinarySetup(BaseModel):
    """
    Setup parameters for Cloudinary integration
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    cloudinary_api_key: str
    """
    The API key for Cloudinary
    """
    cloudinary_api_secret: str
    """
    The API secret for Cloudinary
    """
    cloudinary_cloud_name: str
    """
    The Cloud name for Cloudinary
    """
    params: dict[str, Any] | None = None
    """
    Additional parameters for the Cloudinary API
    """


class CloudinarySetupUpdate(BaseModel):
    """
    Setup parameters for Cloudinary integration
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    cloudinary_api_key: str | None = None
    """
    The API key for Cloudinary
    """
    cloudinary_api_secret: str | None = None
    """
    The API secret for Cloudinary
    """
    cloudinary_cloud_name: str | None = None
    """
    The Cloud name for Cloudinary
    """
    params: dict[str, Any] | None = None
    """
    Additional parameters for the Cloudinary API
    """


class CloudinaryUploadArguments(BaseModel):
    """
    Arguments for Cloudinary media upload
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    file: str
    """
    The URL of the file upload
    """
    return_base64: StrictBool = False
    """
    Return base64 encoded file
    """
    public_id: str | None = None
    """
    Optional public ID for the uploaded file
    """
    upload_params: dict[str, Any] | None = None
    """
    Optional upload parameters
    """


class CloudinaryUploadArgumentsUpdate(BaseModel):
    """
    Arguments for Cloudinary media upload
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    file: str | None = None
    """
    The URL of the file upload
    """
    return_base64: StrictBool = False
    """
    Return base64 encoded file
    """
    public_id: str | None = None
    """
    Optional public ID for the uploaded file
    """
    upload_params: dict[str, Any] | None = None
    """
    Optional upload parameters
    """


class Computer20241022Def(BaseModel):
    """
    Anthropic new tools
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    type: Literal["computer_20241022"] = "computer_20241022"
    name: str = "computer"
    display_width_px: Annotated[int, Field(ge=600)] = 1024
    """
    The display width in pixels
    """
    display_height_px: Annotated[int, Field(ge=400)] = 768
    """
    The display height in pixels
    """
    display_number: Annotated[int, Field(ge=1, le=10)] = 1
    """
    The display number to use
    """


class Computer20241022DefUpdate(Computer20241022Def):
    """
    Anthropic new tools
    """


class CreateToolRequest(BaseModel):
    """
    Payload for creating a tool
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    name: Annotated[str, Field(max_length=40, pattern="^[^\\W0-9]\\w*$")]
    """
    Name of the tool (must be unique for this agent and a valid python identifier string )
    """
    type: Literal[
        "function",
        "integration",
        "system",
        "api_call",
        "computer_20241022",
        "text_editor_20241022",
        "bash_20241022",
    ]
    """
    Type of the tool
    """
    description: str | None = None
    """
    Description of the tool
    """
    function: FunctionDef | None = None
    """
    The function to call
    """
    integration: (
        DummyIntegrationDef
        | BraveIntegrationDef
        | EmailIntegrationDef
        | SpiderIntegrationDef
        | WikipediaIntegrationDef
        | WeatherIntegrationDef
        | BrowserbaseContextIntegrationDef
        | BrowserbaseExtensionIntegrationDef
        | BrowserbaseListSessionsIntegrationDef
        | BrowserbaseCreateSessionIntegrationDef
        | BrowserbaseGetSessionIntegrationDef
        | BrowserbaseCompleteSessionIntegrationDef
        | BrowserbaseGetSessionLiveUrlsIntegrationDef
        | RemoteBrowserIntegrationDef
        | LlamaParseIntegrationDef
        | FfmpegIntegrationDef
        | CloudinaryUploadIntegrationDef
        | CloudinaryEditIntegrationDef
        | ArxivIntegrationDef
        | None
    ) = None
    """
    The integration to call
    """
    system: SystemDef | None = None
    """
    The system to call
    """
    api_call: ApiCallDef | None = None
    """
    The API call to make
    """
    computer_20241022: Computer20241022Def | None = None
    """
    (Alpha) Anthropic new tools
    """
    text_editor_20241022: TextEditor20241022Def | None = None
    bash_20241022: Bash20241022Def | None = None


class DummyIntegrationDef(BaseIntegrationDef):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    provider: Literal["dummy"] = "dummy"


class DummyIntegrationDefUpdate(BaseIntegrationDefUpdate):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    provider: Literal["dummy"] = "dummy"


class EmailArguments(BaseModel):
    """
    Arguments for Email sending
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    to: str
    """
    The email address to send the email to
    """
    from_: Annotated[str, Field(alias="from")]
    """
    The email address to send the email from
    """
    subject: str
    """
    The subject of the email
    """
    body: str
    """
    The body of the email
    """


class EmailArgumentsUpdate(BaseModel):
    """
    Arguments for Email sending
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    to: str | None = None
    """
    The email address to send the email to
    """
    from_: Annotated[str | None, Field(alias="from")] = None
    """
    The email address to send the email from
    """
    subject: str | None = None
    """
    The subject of the email
    """
    body: str | None = None
    """
    The body of the email
    """


class EmailIntegrationDef(BaseIntegrationDef):
    """
    Email integration definition
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    provider: Literal["email"] = "email"
    """
    The provider must be "email"
    """
    method: str | None = None
    """
    The specific method of the integration to call
    """
    setup: EmailSetup | None = None
    """
    The setup parameters for Email
    """
    arguments: EmailArguments | None = None
    """
    The arguments for Email sending
    """


class EmailIntegrationDefUpdate(BaseIntegrationDefUpdate):
    """
    Email integration definition
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    provider: Literal["email"] = "email"
    """
    The provider must be "email"
    """
    method: str | None = None
    """
    The specific method of the integration to call
    """
    setup: EmailSetupUpdate | None = None
    """
    The setup parameters for Email
    """
    arguments: EmailArgumentsUpdate | None = None
    """
    The arguments for Email sending
    """


class EmailSetup(BaseModel):
    """
    Setup parameters for Email integration
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    host: str
    """
    The host of the email server
    """
    port: int
    """
    The port of the email server
    """
    user: str
    """
    The username of the email server
    """
    password: str
    """
    The password of the email server
    """


class EmailSetupUpdate(BaseModel):
    """
    Setup parameters for Email integration
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    host: str | None = None
    """
    The host of the email server
    """
    port: int | None = None
    """
    The port of the email server
    """
    user: str | None = None
    """
    The username of the email server
    """
    password: str | None = None
    """
    The password of the email server
    """


class FfmpegIntegrationDef(BaseIntegrationDef):
    """
    Ffmpeg integration definition
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    provider: Literal["ffmpeg"] = "ffmpeg"
    """
    The provider must be "ffmpeg"
    """
    method: str | None = None
    """
    The specific method of the integration to call
    """
    setup: Any | None = None
    """
    The setup parameters for Ffmpeg
    """
    arguments: FfmpegSearchArguments | None = None
    """
    The arguments for Ffmpeg Search
    """


class FfmpegIntegrationDefUpdate(BaseIntegrationDefUpdate):
    """
    Ffmpeg integration definition
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    provider: Literal["ffmpeg"] = "ffmpeg"
    """
    The provider must be "ffmpeg"
    """
    method: str | None = None
    """
    The specific method of the integration to call
    """
    setup: Any | None = None
    """
    The setup parameters for Ffmpeg
    """
    arguments: FfmpegSearchArgumentsUpdate | None = None
    """
    The arguments for Ffmpeg Search
    """


class FfmpegSearchArguments(BaseModel):
    """
    Arguments for Ffmpeg CMD
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    cmd: str
    """
    The bash command string
    """
    file: str | None = None
    """
    The base64 string of the file
    """


class FfmpegSearchArgumentsUpdate(BaseModel):
    """
    Arguments for Ffmpeg CMD
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    cmd: str | None = None
    """
    The bash command string
    """
    file: str | None = None
    """
    The base64 string of the file
    """


class FunctionCallOption(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    name: str
    """
    The name of the function
    """
    arguments: str | None = None
    """
    The parameters to pass to the function
    """


class FunctionDef(BaseModel):
    """
    Function definition
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    name: Any | None = None
    """
    DO NOT USE: This will be overriden by the tool name. Here only for compatibility reasons.
    """
    description: Any | None = None
    """
    DO NOT USE: This will be overriden by the tool description. Here only for compatibility reasons.
    """
    parameters: dict[str, Any] | None = None
    """
    The parameters the function accepts
    """


class LlamaParseFetchArguments(BaseModel):
    """
    Arguments for LlamaParse integration
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    filename: str | None = None
    """
    File Name. If not provided, a random name will be generated.
    """
    file: str | list[str]
    """
    The base64 string of the file, which can be a single string or a list of strings
    """
    params: dict[str, Any] | None = None
    """
    Optional upload parameters
    """
    base64: StrictBool = False
    """
    The input file is base64
    """


class LlamaParseFetchArgumentsUpdate(BaseModel):
    """
    Arguments for LlamaParse integration
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    filename: str | None = None
    """
    File Name. If not provided, a random name will be generated.
    """
    file: str | list[str] | None = None
    """
    The base64 string of the file, which can be a single string or a list of strings
    """
    params: dict[str, Any] | None = None
    """
    Optional upload parameters
    """
    base64: StrictBool = False
    """
    The input file is base64
    """


class LlamaParseIntegrationDef(BaseIntegrationDef):
    """
    LlamaParse integration definition
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    provider: Literal["llama_parse"] = "llama_parse"
    """
    The provider must be "LlamaParseSetup"
    """
    method: str | None = None
    """
    The specific method of the integration to call
    """
    setup: LlamaParseSetup | None = None
    """
    The setup parameters for LlamaParse
    """
    arguments: LlamaParseFetchArguments | None = None
    """
    The arguments for LlamaParse
    """


class LlamaParseIntegrationDefUpdate(BaseIntegrationDefUpdate):
    """
    LlamaParse integration definition
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    provider: Literal["llama_parse"] = "llama_parse"
    """
    The provider must be "LlamaParseSetup"
    """
    method: str | None = None
    """
    The specific method of the integration to call
    """
    setup: LlamaParseSetupUpdate | None = None
    """
    The setup parameters for LlamaParse
    """
    arguments: LlamaParseFetchArgumentsUpdate | None = None
    """
    The arguments for LlamaParse
    """


class LlamaParseSetup(BaseModel):
    """
    Setup parameters for LlamaParse integration
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    llamaparse_api_key: str
    """
    The API key for LlamaParse
    """
    params: dict[str, Any] | None = None
    """
    Optional upload parameters
    """


class LlamaParseSetupUpdate(BaseModel):
    """
    Setup parameters for LlamaParse integration
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    llamaparse_api_key: str | None = None
    """
    The API key for LlamaParse
    """
    params: dict[str, Any] | None = None
    """
    Optional upload parameters
    """


class NamedToolChoice(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    function: FunctionCallOption | None = None


class PatchToolRequest(BaseModel):
    """
    Payload for patching a tool
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    name: Annotated[str | None, Field(max_length=40, pattern="^[^\\W0-9]\\w*$")] = None
    """
    Name of the tool (must be unique for this agent and a valid python identifier string )
    """
    type: (
        Literal[
            "function",
            "integration",
            "system",
            "api_call",
            "computer_20241022",
            "text_editor_20241022",
            "bash_20241022",
        ]
        | None
    ) = None
    """
    Type of the tool
    """
    description: str | None = None
    """
    Description of the tool
    """
    function: FunctionDef | None = None
    """
    The function to call
    """
    integration: (
        DummyIntegrationDefUpdate
        | BraveIntegrationDefUpdate
        | EmailIntegrationDefUpdate
        | SpiderIntegrationDefUpdate
        | WikipediaIntegrationDefUpdate
        | WeatherIntegrationDefUpdate
        | BrowserbaseContextIntegrationDefUpdate
        | BrowserbaseExtensionIntegrationDefUpdate
        | BrowserbaseListSessionsIntegrationDefUpdate
        | BrowserbaseCreateSessionIntegrationDefUpdate
        | BrowserbaseGetSessionIntegrationDefUpdate
        | BrowserbaseCompleteSessionIntegrationDefUpdate
        | BrowserbaseGetSessionLiveUrlsIntegrationDefUpdate
        | RemoteBrowserIntegrationDefUpdate
        | LlamaParseIntegrationDefUpdate
        | FfmpegIntegrationDefUpdate
        | CloudinaryUploadIntegrationDefUpdate
        | CloudinaryEditIntegrationDefUpdate
        | ArxivIntegrationDefUpdate
        | None
    ) = None
    """
    The integration to call
    """
    system: SystemDefUpdate | None = None
    """
    The system to call
    """
    api_call: ApiCallDefUpdate | None = None
    """
    The API call to make
    """
    computer_20241022: Computer20241022DefUpdate | None = None
    """
    (Alpha) Anthropic new tools
    """
    text_editor_20241022: TextEditor20241022DefUpdate | None = None
    bash_20241022: Bash20241022DefUpdate | None = None


class RemoteBrowserArguments(BaseModel):
    """
    The arguments for the remote browser
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    connect_url: str | None = None
    """
    The connection URL for the remote browser
    """
    action: Literal[
        "key",
        "type",
        "mouse_move",
        "left_click",
        "left_click_drag",
        "right_click",
        "middle_click",
        "double_click",
        "screenshot",
        "cursor_position",
        "navigate",
        "refresh",
    ]
    """
    The action to perform
    """
    text: str | None = None
    """
    The text
    """
    coordinate: list | None = None
    """
    The coordinate to move the mouse to
    """


class RemoteBrowserArgumentsUpdate(BaseModel):
    """
    The arguments for the remote browser
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    connect_url: str | None = None
    """
    The connection URL for the remote browser
    """
    action: (
        Literal[
            "key",
            "type",
            "mouse_move",
            "left_click",
            "left_click_drag",
            "right_click",
            "middle_click",
            "double_click",
            "screenshot",
            "cursor_position",
            "navigate",
            "refresh",
        ]
        | None
    ) = None
    """
    The action to perform
    """
    text: str | None = None
    """
    The text
    """
    coordinate: list | None = None
    """
    The coordinate to move the mouse to
    """


class RemoteBrowserIntegrationDef(BaseIntegrationDef):
    """
    The integration definition for the remote browser
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    provider: Literal["remote_browser"] = "remote_browser"
    setup: RemoteBrowserSetup
    method: Literal["perform_action"] = "perform_action"
    arguments: RemoteBrowserArguments | None = None


class RemoteBrowserIntegrationDefUpdate(BaseIntegrationDefUpdate):
    """
    The integration definition for the remote browser
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    provider: Literal["remote_browser"] = "remote_browser"
    setup: RemoteBrowserSetup | None = None
    method: Literal["perform_action"] = "perform_action"
    arguments: RemoteBrowserArgumentsUpdate | None = None


class RemoteBrowserSetup(BaseModel):
    """
    The setup parameters for the remote browser
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    connect_url: str | None = None
    """
    The connection URL for the remote browser
    """
    width: int | None = None
    """
    The width of the browser
    """
    height: int | None = None
    """
    The height of the browser
    """


class SpiderFetchArguments(BaseModel):
    """
    Arguments for Spider integration
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    url: AnyUrl
    """
    The URL to fetch data from
    """
    content_type: Literal[
        "application/json", "text/csv", "application/xml", "application/jsonl"
    ] = "application/json"
    """
    The content type to return
    """
    params: dict[str, Any] | None = None
    """
    Additional parameters for the Spider API
    """


class SpiderFetchArgumentsUpdate(BaseModel):
    """
    Arguments for Spider integration
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    url: AnyUrl | None = None
    """
    The URL to fetch data from
    """
    content_type: Literal[
        "application/json", "text/csv", "application/xml", "application/jsonl"
    ] = "application/json"
    """
    The content type to return
    """
    params: dict[str, Any] | None = None
    """
    Additional parameters for the Spider API
    """


class SpiderIntegrationDef(BaseIntegrationDef):
    """
    Spider integration definition
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    provider: Literal["spider"] = "spider"
    """
    The provider must be "spider"
    """
    method: Literal["crawl", "links", "screenshot", "search"] | None = None
    """
    The specific method of the integration to call
    """
    setup: SpiderSetup | None = None
    """
    The setup parameters for Spider
    """
    arguments: SpiderFetchArguments | None = None
    """
    The arguments for Spider
    """


class SpiderIntegrationDefUpdate(BaseIntegrationDefUpdate):
    """
    Spider integration definition
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    provider: Literal["spider"] = "spider"
    """
    The provider must be "spider"
    """
    method: Literal["crawl", "links", "screenshot", "search"] | None = None
    """
    The specific method of the integration to call
    """
    setup: SpiderSetupUpdate | None = None
    """
    The setup parameters for Spider
    """
    arguments: SpiderFetchArgumentsUpdate | None = None
    """
    The arguments for Spider
    """


class SpiderSetup(BaseModel):
    """
    Setup parameters for Spider integration
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    spider_api_key: str
    """
    The API key for Spider
    """


class SpiderSetupUpdate(BaseModel):
    """
    Setup parameters for Spider integration
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    spider_api_key: str | None = None
    """
    The API key for Spider
    """


class SystemDef(BaseModel):
    """
    System definition
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    resource: Literal["agent", "user", "task", "execution", "doc", "session", "job"]
    """
    Resource is the name of the resource to use
    """
    operation: Literal[
        "create",
        "update",
        "patch",
        "create_or_update",
        "embed",
        "change_status",
        "search",
        "chat",
        "history",
        "delete",
        "get",
        "list",
    ]
    """
    Operation is the name of the operation to perform
    """
    resource_id: UUID | None = None
    """
    Resource id (if applicable)
    """
    subresource: Literal["tool", "doc", "execution", "transition"] | None = None
    """
    Sub-resource type (if applicable)
    """
    arguments: dict[str, Any] | None = None
    """
    The arguments to pre-apply to the system call
    """


class SystemDefUpdate(BaseModel):
    """
    System definition
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    resource: Literal["agent", "user", "task", "execution", "doc", "session", "job"] | None = (
        None
    )
    """
    Resource is the name of the resource to use
    """
    operation: (
        Literal[
            "create",
            "update",
            "patch",
            "create_or_update",
            "embed",
            "change_status",
            "search",
            "chat",
            "history",
            "delete",
            "get",
            "list",
        ]
        | None
    ) = None
    """
    Operation is the name of the operation to perform
    """
    resource_id: UUID | None = None
    """
    Resource id (if applicable)
    """
    subresource: Literal["tool", "doc", "execution", "transition"] | None = None
    """
    Sub-resource type (if applicable)
    """
    arguments: dict[str, Any] | None = None
    """
    The arguments to pre-apply to the system call
    """


class TextEditor20241022Def(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    type: Literal["text_editor_20241022"] = "text_editor_20241022"
    name: str = "str_replace_editor"


class TextEditor20241022DefUpdate(TextEditor20241022Def):
    pass


class Tool(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    name: Annotated[str, Field(max_length=40, pattern="^[^\\W0-9]\\w*$")]
    """
    Name of the tool (must be unique for this agent and a valid python identifier string )
    """
    type: Literal[
        "function",
        "integration",
        "system",
        "api_call",
        "computer_20241022",
        "text_editor_20241022",
        "bash_20241022",
    ]
    """
    Type of the tool
    """
    description: str | None = None
    """
    Description of the tool
    """
    function: FunctionDef | None = None
    """
    The function to call
    """
    integration: (
        DummyIntegrationDef
        | BraveIntegrationDef
        | EmailIntegrationDef
        | SpiderIntegrationDef
        | WikipediaIntegrationDef
        | WeatherIntegrationDef
        | BrowserbaseContextIntegrationDef
        | BrowserbaseExtensionIntegrationDef
        | BrowserbaseListSessionsIntegrationDef
        | BrowserbaseCreateSessionIntegrationDef
        | BrowserbaseGetSessionIntegrationDef
        | BrowserbaseCompleteSessionIntegrationDef
        | BrowserbaseGetSessionLiveUrlsIntegrationDef
        | RemoteBrowserIntegrationDef
        | LlamaParseIntegrationDef
        | FfmpegIntegrationDef
        | CloudinaryUploadIntegrationDef
        | CloudinaryEditIntegrationDef
        | ArxivIntegrationDef
        | None
    ) = None
    """
    The integration to call
    """
    system: SystemDef | None = None
    """
    The system to call
    """
    api_call: ApiCallDef | None = None
    """
    The API call to make
    """
    computer_20241022: Computer20241022Def | None = None
    """
    (Alpha) Anthropic new tools
    """
    text_editor_20241022: TextEditor20241022Def | None = None
    bash_20241022: Bash20241022Def | None = None
    created_at: Annotated[AwareDatetime, Field(json_schema_extra={"readOnly": True})]
    """
    When this resource was created as UTC date-time
    """
    updated_at: Annotated[AwareDatetime, Field(json_schema_extra={"readOnly": True})]
    """
    When this resource was updated as UTC date-time
    """
    id: Annotated[UUID, Field(json_schema_extra={"readOnly": True})]


class ToolResponse(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: str
    output: dict[str, Any]
    """
    The output of the tool
    """


class UpdateToolRequest(BaseModel):
    """
    Payload for updating a tool
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    name: Annotated[str, Field(max_length=40, pattern="^[^\\W0-9]\\w*$")]
    """
    Name of the tool (must be unique for this agent and a valid python identifier string )
    """
    type: Literal[
        "function",
        "integration",
        "system",
        "api_call",
        "computer_20241022",
        "text_editor_20241022",
        "bash_20241022",
    ]
    """
    Type of the tool
    """
    description: str | None = None
    """
    Description of the tool
    """
    function: FunctionDef | None = None
    """
    The function to call
    """
    integration: (
        DummyIntegrationDef
        | BraveIntegrationDef
        | EmailIntegrationDef
        | SpiderIntegrationDef
        | WikipediaIntegrationDef
        | WeatherIntegrationDef
        | BrowserbaseContextIntegrationDef
        | BrowserbaseExtensionIntegrationDef
        | BrowserbaseListSessionsIntegrationDef
        | BrowserbaseCreateSessionIntegrationDef
        | BrowserbaseGetSessionIntegrationDef
        | BrowserbaseCompleteSessionIntegrationDef
        | BrowserbaseGetSessionLiveUrlsIntegrationDef
        | RemoteBrowserIntegrationDef
        | LlamaParseIntegrationDef
        | FfmpegIntegrationDef
        | CloudinaryUploadIntegrationDef
        | CloudinaryEditIntegrationDef
        | ArxivIntegrationDef
        | None
    ) = None
    """
    The integration to call
    """
    system: SystemDef | None = None
    """
    The system to call
    """
    api_call: ApiCallDef | None = None
    """
    The API call to make
    """
    computer_20241022: Computer20241022Def | None = None
    """
    (Alpha) Anthropic new tools
    """
    text_editor_20241022: TextEditor20241022Def | None = None
    bash_20241022: Bash20241022Def | None = None


class WeatherGetArguments(BaseModel):
    """
    Arguments for Weather
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    location: str
    """
    The location for which to fetch weather data
    """


class WeatherGetArgumentsUpdate(BaseModel):
    """
    Arguments for Weather
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    location: str | None = None
    """
    The location for which to fetch weather data
    """


class WeatherIntegrationDef(BaseIntegrationDef):
    """
    Weather integration definition
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    provider: Literal["weather"] = "weather"
    """
    The provider must be "weather"
    """
    method: str | None = None
    """
    The specific method of the integration to call
    """
    setup: WeatherSetup | None = None
    """
    The setup parameters for Weather
    """
    arguments: WeatherGetArguments | None = None
    """
    The arguments for Weather
    """


class WeatherIntegrationDefUpdate(BaseIntegrationDefUpdate):
    """
    Weather integration definition
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    provider: Literal["weather"] = "weather"
    """
    The provider must be "weather"
    """
    method: str | None = None
    """
    The specific method of the integration to call
    """
    setup: WeatherSetupUpdate | None = None
    """
    The setup parameters for Weather
    """
    arguments: WeatherGetArgumentsUpdate | None = None
    """
    The arguments for Weather
    """


class WeatherSetup(BaseModel):
    """
    Integration definition for Weather
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    openweathermap_api_key: str
    """
    The api key for OpenWeatherMap
    """


class WeatherSetupUpdate(BaseModel):
    """
    Integration definition for Weather
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    openweathermap_api_key: str | None = None
    """
    The api key for OpenWeatherMap
    """


class WikipediaIntegrationDef(BaseIntegrationDef):
    """
    Wikipedia integration definition
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    provider: Literal["wikipedia"] = "wikipedia"
    """
    The provider must be "wikipedia"
    """
    method: str | None = None
    """
    The specific method of the integration to call
    """
    setup: Any | None = None
    """
    The setup parameters for Wikipedia
    """
    arguments: WikipediaSearchArguments | None = None
    """
    The arguments for Wikipedia Search
    """


class WikipediaIntegrationDefUpdate(BaseIntegrationDefUpdate):
    """
    Wikipedia integration definition
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    provider: Literal["wikipedia"] = "wikipedia"
    """
    The provider must be "wikipedia"
    """
    method: str | None = None
    """
    The specific method of the integration to call
    """
    setup: Any | None = None
    """
    The setup parameters for Wikipedia
    """
    arguments: WikipediaSearchArgumentsUpdate | None = None
    """
    The arguments for Wikipedia Search
    """


class WikipediaSearchArguments(BaseModel):
    """
    Arguments for Wikipedia Search
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    query: str
    """
    The search query string
    """
    load_max_docs: Annotated[int, Field(ge=1, le=10)] = 2
    """
    Maximum number of documents to load
    """


class WikipediaSearchArgumentsUpdate(BaseModel):
    """
    Arguments for Wikipedia Search
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    query: str | None = None
    """
    The search query string
    """
    load_max_docs: Annotated[int, Field(ge=1, le=10)] = 2
    """
    Maximum number of documents to load
    """


class ArxivIntegrationDef(BaseIntegrationDef):
    """
    Arxiv integration definition
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    provider: Literal["arxiv"] = "arxiv"
    """
    The provider must be "arxiv"
    """
    method: str | None = None
    """
    The specific method of the integration to call
    """
    setup: Any | None = None
    """
    The setup parameters for Arxiv
    """
    arguments: ArxivSearchArguments | None = None
    """
    The arguments for Arxiv Search
    """


class ArxivIntegrationDefUpdate(BaseIntegrationDefUpdate):
    """
    Arxiv integration definition
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    provider: Literal["arxiv"] = "arxiv"
    """
    The provider must be "arxiv"
    """
    method: str | None = None
    """
    The specific method of the integration to call
    """
    setup: Any | None = None
    """
    The setup parameters for Arxiv
    """
    arguments: ArxivSearchArgumentsUpdate | None = None
    """
    The arguments for Arxiv Search
    """


class BaseBrowserbaseIntegrationDef(BaseIntegrationDef):
    """
    The base definition for a browserbase integration
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    provider: Literal["browserbase"] = "browserbase"
    setup: BrowserbaseSetup | None = None
    method: (
        Literal[
            "get_live_urls",
            "list_sessions",
            "create_session",
            "get_session",
            "complete_session",
            "get_connect_url",
            "install_extension_from_github",
            "create_context",
            "get_session_downloads",
            "get_logs",
            "get_recordings",
        ]
        | None
    ) = None
    arguments: Any | None = None


class BaseBrowserbaseIntegrationDefUpdate(BaseIntegrationDefUpdate):
    """
    The base definition for a browserbase integration
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    provider: Literal["browserbase"] = "browserbase"
    setup: BrowserbaseSetupUpdate | None = None
    method: (
        Literal[
            "get_live_urls",
            "list_sessions",
            "create_session",
            "get_session",
            "complete_session",
            "get_connect_url",
            "install_extension_from_github",
            "create_context",
            "get_session_downloads",
            "get_logs",
            "get_recordings",
        ]
        | None
    ) = None
    arguments: Any | None = None


class BaseCloudinaryIntegrationDef(BaseIntegrationDef):
    """
    Base Cloudinary integration definition
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    provider: Literal["cloudinary"] = "cloudinary"
    setup: CloudinarySetup | None = None
    method: Literal["media_upload", "media_edit"] | None = None


class BaseCloudinaryIntegrationDefUpdate(BaseIntegrationDefUpdate):
    """
    Base Cloudinary integration definition
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    provider: Literal["cloudinary"] = "cloudinary"
    setup: CloudinarySetupUpdate | None = None
    method: Literal["media_upload", "media_edit"] | None = None


class BrowserbaseCompleteSessionIntegrationDef(BaseBrowserbaseIntegrationDef):
    """
    browserbase complete session integration definition
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    method: Literal["complete_session"] = "complete_session"
    arguments: BrowserbaseCompleteSessionArguments | None = None


class BrowserbaseCompleteSessionIntegrationDefUpdate(BaseBrowserbaseIntegrationDefUpdate):
    """
    browserbase complete session integration definition
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    method: Literal["complete_session"] = "complete_session"
    arguments: BrowserbaseCompleteSessionArgumentsUpdate | None = None


class BrowserbaseContextIntegrationDef(BaseBrowserbaseIntegrationDef):
    """
    browserbase context provider
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    method: Literal["create_context"] = "create_context"
    """
    The specific method of the integration to call
    """
    arguments: BrowserbaseContextArguments | None = None
    """
    The arguments for the method
    """


class BrowserbaseContextIntegrationDefUpdate(BaseBrowserbaseIntegrationDefUpdate):
    """
    browserbase context provider
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    method: Literal["create_context"] = "create_context"
    """
    The specific method of the integration to call
    """
    arguments: BrowserbaseContextArgumentsUpdate | None = None
    """
    The arguments for the method
    """


class BrowserbaseCreateSessionIntegrationDef(BaseBrowserbaseIntegrationDef):
    """
    browserbase create session integration definition
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    method: Literal["create_session"] = "create_session"
    arguments: BrowserbaseCreateSessionArguments | None = None
    """
    The arguments for the method
    """


class BrowserbaseCreateSessionIntegrationDefUpdate(BaseBrowserbaseIntegrationDefUpdate):
    """
    browserbase create session integration definition
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    method: Literal["create_session"] = "create_session"
    arguments: BrowserbaseCreateSessionArguments | None = None
    """
    The arguments for the method
    """


class BrowserbaseExtensionIntegrationDef(BaseBrowserbaseIntegrationDef):
    """
    browserbase extension provider
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    method: Literal["install_extension_from_github"] | None = None
    """
    The specific method of the integration to call
    """
    arguments: BrowserbaseExtensionArguments | None = None
    """
    The arguments for the method
    """


class BrowserbaseExtensionIntegrationDefUpdate(BaseBrowserbaseIntegrationDefUpdate):
    """
    browserbase extension provider
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    method: Literal["install_extension_from_github"] | None = None
    """
    The specific method of the integration to call
    """
    arguments: BrowserbaseExtensionArgumentsUpdate | None = None
    """
    The arguments for the method
    """


class BrowserbaseGetSessionIntegrationDef(BaseBrowserbaseIntegrationDef):
    """
    browserbase get session integration definition
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    method: Literal["get_session"] = "get_session"
    arguments: BrowserbaseGetSessionArguments | None = None


class BrowserbaseGetSessionIntegrationDefUpdate(BaseBrowserbaseIntegrationDefUpdate):
    """
    browserbase get session integration definition
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    method: Literal["get_session"] = "get_session"
    arguments: BrowserbaseGetSessionArgumentsUpdate | None = None


class BrowserbaseGetSessionLiveUrlsIntegrationDef(BaseBrowserbaseIntegrationDef):
    """
    browserbase get session live urls integration definition
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    method: Literal["get_live_urls"] = "get_live_urls"
    arguments: BrowserbaseGetSessionLiveUrlsArguments | None = None


class BrowserbaseGetSessionLiveUrlsIntegrationDefUpdate(BaseBrowserbaseIntegrationDefUpdate):
    """
    browserbase get session live urls integration definition
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    method: Literal["get_live_urls"] = "get_live_urls"
    arguments: BrowserbaseGetSessionLiveUrlsArgumentsUpdate | None = None


class BrowserbaseListSessionsIntegrationDef(BaseBrowserbaseIntegrationDef):
    """
    browserbase list sessions integration definition
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    method: Literal["list_sessions"] = "list_sessions"
    """
    The specific method of the integration to call
    """
    arguments: BrowserbaseListSessionsArguments | None = None
    """
    The arguments for the method
    """


class BrowserbaseListSessionsIntegrationDefUpdate(BaseBrowserbaseIntegrationDefUpdate):
    """
    browserbase list sessions integration definition
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    method: Literal["list_sessions"] = "list_sessions"
    """
    The specific method of the integration to call
    """
    arguments: BrowserbaseListSessionsArguments | None = None
    """
    The arguments for the method
    """


class CloudinaryEditIntegrationDef(BaseCloudinaryIntegrationDef):
    """
    Cloudinary edit integration definition
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    method: Literal["media_edit"] = "media_edit"
    arguments: CloudinaryEditArguments | None = None


class CloudinaryEditIntegrationDefUpdate(BaseCloudinaryIntegrationDefUpdate):
    """
    Cloudinary edit integration definition
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    method: Literal["media_edit"] = "media_edit"
    arguments: CloudinaryEditArgumentsUpdate | None = None


class CloudinaryUploadIntegrationDef(BaseCloudinaryIntegrationDef):
    """
    Cloudinary upload integration definition
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    method: Literal["media_upload"] = "media_upload"
    arguments: CloudinaryUploadArguments | None = None


class CloudinaryUploadIntegrationDefUpdate(BaseCloudinaryIntegrationDefUpdate):
    """
    Cloudinary upload integration definition
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    method: Literal["media_upload"] = "media_upload"
    arguments: CloudinaryUploadArgumentsUpdate | None = None
